package com.halibaduo.book;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * @author wangjie
 * 用户当用户发送评论时所使用
 *
 *         resp.setContentType("text/html;charset=utf-8");
 *         PrintWriter writer = resp.getWriter();
 */
@WebServlet(urlPatterns = "/comment")
public class Comment extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String comment = req.getParameter("comment");
        if (comment != null && !comment.equals("")){ // html方面已经做过不填写数据不允许提交了 但双重保险谁不爱呢~
            comment = new String(comment.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        }

        // 发现根本没有输入内容时直接结束吧
//        if (comment == null){
//            return;
//        }
        // 还是干脆不让提交事务来的干脆

//        System.out.println("评论是:"+comment);
        // 验证过程已经结束
//        boolean flag3 = true;
//        writer.write(""+flag3);
//        Scanner reader = new Scanner(System.in);


        /* 先看看其是否有@某人 当然如果没有就会有mysql的username的默认人名称 : 未知 */
        String[] str1 = new String[]{""};
        List<String> comments = new ArrayList<>();
        int index = 0;
        while (index < comment.length()) {
            int atIndex = comment.indexOf("@", index);
            if (atIndex == -1) {
                break;
            }
            int semicolonIndex = comment.indexOf(";", atIndex + 1);
            if (semicolonIndex == -1) {
                semicolonIndex = comment.length();
            }
            comments.add(comment.substring(atIndex + 1, semicolonIndex));
            index = semicolonIndex + 1;
        }
        int ii = 0;
        for (String str : comments) {  // 到了这已经获取了所有需要去回复人的id了 这些关系都是放在comments表中
//            System.out.println(str+",");
//            str = new String(str.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
            str1[ii] = str; // 以次将所有的待发送人关系规列好 都是studentnumber
//            System.out.println("str:"+str);
            ii++;
        }
        StringBuilder newComment = new StringBuilder(comment);
        for (String str : comments) {
            int startIndex = newComment.indexOf("@" + str);
            int endIndex = newComment.indexOf(";", startIndex + 1);
            if (endIndex == -1) {
                endIndex = newComment.length();
            } else {
                endIndex++; // 包括";"字符
            }
            newComment.replace(startIndex, endIndex, "");
        }

        String updatedComment = newComment.toString(); // 获取更新后的评论
        comment = updatedComment; // 更新数据


        // 当前时间
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());


        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");
        String studentnumber = user.getStudentnumber(); // 获取了studentnumber 靠这个再去获得username
        String username1 = mapper.getusername(studentnumber);  // 获取的是name了 不是username
        String studentnumber1 = user.getStudentnumber(); // 这是发帖人的学号来锁定发帖人

        // comments和comments1中的username其实都是tb_user中的name ！！！！
//        System.out.println("str1[0]:"+str1[0]);
        if (str1[0] == "" || str1[0] == null){
            // 没有指定发送人的 发送到comments1中
            mapper.addComment(comment, timestamp, username1, studentnumber1);
        }else{
            // 指定了发送人的 是发送到comments中
            for (int i = 0; i <= ii; i++){
                //如果没有选定发送人 那就是储存到comments1 选定了就
                // 当前的情况下看看只有创建时间和评论内容的帖子展示 studentnumber1:是发送该消息的人的 str1[i]是接受该消息的人的
                String studentnumber2 = "3200"+str1[i];  // 是被发帖人的学号 注意在前端已经默认自动删除了前面的3200
                String username2 = mapper.getusername(studentnumber2); // 被发帖人的name 注意不是username 防止太容易重叠同一username 当然同一name是防不胜防
                mapper.addComment1(comment, timestamp, username1, username2, studentnumber2);
            }
        }

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

    }
}
package com.halibaduo.book;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Book;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.News;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于媒体中心的书
* */
@WebServlet("/getbookinfo/*")
public class Getbookinfo extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<Book> pageBean = brandService.getAllbook();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.book;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Book;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于媒体中心的书  这是第二本
* */
@WebServlet("/getbookinfo1/*")
public class Getbookinfo1 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<Book> pageBean = brandService.getAllbook1();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.book;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author wangjie
 * 得到最新的班级通知
 */
@WebServlet(urlPatterns = "/getTheNew")
public class GetTheNew extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        HttpSession session = ((HttpServletRequest) req).getSession();
        User user = (User) session.getAttribute("user");
        String studentnumber = user.getStudentnumber();
        String classGrade = String.valueOf(mapper.getClasso(studentnumber));

        String title = mapper.getThenewtz(classGrade);

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("title", title);

        String jsonString = jsonObject.toString();

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);

    }
}
package com.halibaduo.Class;

import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.sql.Timestamp;

/**
 * @author wangjie
 * 服务于发起班级通知
 */
@WebServlet(urlPatterns = "/doDo")
public class DODO extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String tz = req.getParameter("tz"); // 获得输入的内容
        String title = req.getParameter("title");

        HttpSession session = ((HttpServletRequest) req).getSession();
        User user = (User) session.getAttribute("user");

        Integer status = user.getStatus();
        if (status == 1){ // 只有邦长才能发起班级通知

            String name = user.getName();
    //        System.out.println("开始name:"+name);
    //        name = new String(name.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
    //        System.out.println("后面name:"+name);
            String classGrade = String.valueOf(user.getStudentnumber()); // 这里起名由一点问题 但我就是不改 就是玩


            tz = new String(tz.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
            title = new String(title.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);

            /* 1.加载mybatis的核心部件  去官网copy*/
            String resource = "mybatis-config.xml";  // 就在resources根目录下
            InputStream inputStream = Resources.getResourceAsStream(resource);
            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

            /*2.获取SqlSession对象, 用它执行sql*/
            SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

            /*3.获取mapper接口的代理对象*/
            UserMapper mapper = sqlSession.getMapper(UserMapper.class);

            // 开始向表中填入信息 还差获取当前时间呢
            // 当前时间
            Timestamp timestamp = new Timestamp(System.currentTimeMillis());

            mapper.addBJTZ(tz, timestamp, classGrade, title);

            /*6.提交事务并释放资源*/
            sqlSession.commit();  // 提交
            sqlSession.close();  // 释放

            String contextPath = req.getContextPath();
            resp.sendRedirect(contextPath+"/pages/jrbjt.html"); // 前往这个页面
        }else{
            resp.setContentType("text/html;charset=utf-8");
            PrintWriter writer = resp.getWriter();

            writer.write("<h2>不好意思，只有班级班长才有权力发起通知</h2>");
            writer.write("<h2>Sorry, only the class monitor has the authority to initiate notifications</h2>");
            // 由于下面这行代码写了的话上面的两行代码形同虚设，所以干脆 让用户自己撤回
//            writer.write("<script>\n" +
//                    "\t\twindow.location.href = \"./pages/jrbjt.html\";\n" +
//                    "\t</script>");
            writer.write("<a href=\"./pages/jrbjt.html\">返回</a>");
        }
    }
}
package com.halibaduo.Class;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.Comments;
import com.halibaduo.pojo.Comments1;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;
import com.halibaduo.web.AjaxServlet;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * @author 王杰
 * 服务于展现回复评论的功能
 */
@WebServlet(urlPatterns = "/getNewNew")
public class GetNewNew extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
//        String resource = "mybatis-config.xml";  // 就在resources根目录下
//        InputStream inputStream = Resources.getResourceAsStream(resource);
//        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
//
//        /*2.获取SqlSession对象, 用它执行sql*/
//        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务
//
//        /*3.获取mapper接口的代理对象*/
//        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

//        System.out.println("证明一下 我确实过来了");

        // 暂且的问题就是回复出现的表格是所有人的 我需要修改成只是回复自己的所有的评论 且还需要按照回复时间的先后排序
        String studentnumber = AjaxServlet.poster; // 获取当前点击回复这人的学号了
        // 再通过这点击人的学号去获取他的name
//        System.out.println("studentnumber:"+studentnumber);
        String name = mapper.getName(studentnumber); // 得到当前点击人的name了
//        System.out.println("name:"+name);

        PageBean<Comments1> pageBean = brandService.getTwo1(name);

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);
//        System.out.println("ssa:"+jsonString);

        // 将毫秒转换为正常的时间形式
        String formattedJsonString = formatCreatedTime(jsonString);

//        System.out.println(formattedJsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(formattedJsonString);
    }
    private static String formatCreatedTime(String jsonString) {
        // 日期格式
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        // 解析JSON字符串
        JSONObject jsonObject = JSON.parseObject(jsonString);
        JSONArray rowsArray = jsonObject.getJSONArray("rows");

        // 遍历rows节点并格式化时间戳
        for (int i = 0; i < rowsArray.size(); i++) {
            JSONObject rowObject = rowsArray.getJSONObject(i);

            long milliseconds = rowObject.getLongValue("created_at");
            Date date = new Date(milliseconds);
            String formattedTime = sdf.format(date);

            rowObject.put("createdAtFormatted", formattedTime);
        }

        // 将JSONObject转换为格式化的JSON字符串
        return JSON.toJSONString(jsonObject, SerializerFeature.PrettyFormat);
    }


    public void start(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);
    }
}
package com.halibaduo.Class;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.*;
import com.halibaduo.server.BrandService;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * @author 王杰
 * 服务于班级通知
 */
@WebServlet(urlPatterns = "/getOneTwo")
public class GetOneTwo extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了

    }

    private void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 新追加功能(bug) 哪个班的才能打开哪个班的相册
        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");
        String studentnumber = user.getStudentnumber(); // 得到这个前往查看人的学号了 再通过学号去得到他的
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);
        String classGrade =  mapper.getClassGrade(studentnumber); // 得到班级了

        PageBean<TZ> pageBean = brandService.getOneTwo(classGrade);

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 将毫秒转换为正常的时间形式
        String formattedJsonString = formatCreatedTime(jsonString);
//        System.out.println("das:"+formattedJsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(formattedJsonString);
    }
    private static String formatCreatedTime(String jsonString) {
        // 日期格式
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        // 解析JSON字符串
        JSONObject jsonObject = JSON.parseObject(jsonString);
        JSONArray rowsArray = jsonObject.getJSONArray("rows");

        // 遍历rows节点并格式化时间戳
        for (int i = 0; i < rowsArray.size(); i++) {
            JSONObject rowObject = rowsArray.getJSONObject(i);

            long milliseconds = rowObject.getLongValue("time");
            Date date = new Date(milliseconds);
            String formattedTime = sdf.format(date);

            rowObject.put("createdAtFormatted", formattedTime);
        }

        // 将JSONObject转换为格式化的JSON字符串
        return JSON.toJSONString(jsonObject, SerializerFeature.PrettyFormat);
    }
}
package com.halibaduo.Class;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.pojo.User;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.List;

/**
 * @author wangjie
 * 服务于 进入班级体 的 转让班长身份
 */
@WebServlet(urlPatterns = "/getstudentnumber/*")
public class Getstudentnumber extends HttpServlet {
    private BrandService brandService = new BrandService();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        HttpSession session = req.getSession();
        int classGrade = (int) session.getAttribute("classGrade");
        User user = (User) session.getAttribute("user");
        String studentnumber1 = user.getStudentnumber();  // 得到自己的学号 然后在显示的里面特别标注上
        // 获取改班班长的学号
        String BanZhangStudentNumber = brandService.getBanZhangStudentNumber(classGrade);

        PageBean<User> pageBean = brandService.getstudentnumber(classGrade);

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 效果完成顺利
        JSONObject jsonObject = JSON.parseObject(jsonString);
        List<JSONObject> rows = jsonObject.getJSONArray("rows").toJavaList(JSONObject.class);
        for (JSONObject row : rows) {
            if (row.getString("studentnumber").equals(studentnumber1)) {
                row.put("studentnumber", studentnumber1+"(自己)");
            }
            if (row.getString("studentnumber").equals(BanZhangStudentNumber)) {
                row.put("studentnumber", BanZhangStudentNumber+"(班长)");
            }
        }
        jsonString = String.valueOf(jsonObject);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.Class;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.User;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.List;

/**
* @author wangjie
 * 服务于 进入班集体 的 三个信息的展示 姓名、班级、身份
* */
@WebServlet("/getThreeInfo/*")
public class GetThreeInfo extends HttpServlet {
    private static String NAME;
    private static Integer CLASSGRADE;
    private static Integer STATUS;
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        HttpSession session = ((HttpServletRequest) req).getSession();
        User user = (User) session.getAttribute("user");



        String name = user.getName();
//        System.out.println("开始name:"+name);
//        name = new String(name.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
//        System.out.println("后面name:"+name);
        Integer classGrade = user.getClassgrade();
        String studentnumber = user.getStudentnumber();
        String status = mapper.getStatuso(studentnumber); // 如果当前这个人是这个班级的第一个人 那么便是班长 后面可以自行转让 班长status=1

        session.setAttribute("classGrade", classGrade);

        // 给这个类中的  getAllInfo 函数使用
        NAME = name;
        CLASSGRADE = classGrade;
        STATUS = Integer.valueOf(status);

        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

//         使session消失的代码
//        System.out.println("证明确实退出了");
        HttpSession session = req.getSession();
        session.invalidate();
    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        String name = NAME;
        Integer classGrade = CLASSGRADE;
        Integer status = STATUS;

        String classGrade1 = mapper.getName(classGrade);

        // 1.二级验证身份 （判断是否为该班级的唯一成员） 需要前往注册界面 AddinfoServlet

        // 2.一级验证身份
        String status1 = "";
        if(status == 0) {
            status1 = "普通学生成员";
        } else if (status == 1) {
            status1 = "班级班长";
        } else if (status == 2) {
            status1 = "管理员";
        }
//        System.out.println("status1:"+status1);

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("name", name);
        jsonObject.put("classgrade", classGrade1);
        jsonObject.put("status", status1);

        String jsonString = jsonObject.toString();

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.Class;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.Comments;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.pojo.User;
import com.halibaduo.server.BrandService;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
* @author wangjie
 *
* */
@WebServlet("/getTwoInfo/*")
public class GetTwoInfo extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

//        /* 1.加载mybatis的核心部件  去官网copy*/
//        String resource = "mybatis-config.xml";  // 就在resources根目录下
//        InputStream inputStream = Resources.getResourceAsStream(resource);
//        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
//
//        /*2.获取SqlSession对象, 用它执行sql*/
//        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务
//
//        /*3.获取mapper接口的代理对象*/
//        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

//         使session消失的代码
        HttpSession session = req.getSession();
        session.invalidate();
    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");
        String studentnumber = user.getStudentnumber(); // 得到此时登陆人的学号了 租用是后面得到的评论得是他们班级的
        String classGrade = mapper.getClassGrade(studentnumber); // 得到登陆人的班级号了

        PageBean<Comments> pageBean = brandService.getTwo(classGrade);

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);
//        System.out.println("ssa:"+jsonString);

        // 将毫秒转换为正常的时间形式
        String formattedJsonString = formatCreatedTime(jsonString);

//        System.out.println(formattedJsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(formattedJsonString);
    }
    private static String formatCreatedTime(String jsonString) {
        // 日期格式
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        // 解析JSON字符串
        JSONObject jsonObject = JSON.parseObject(jsonString);
        JSONArray rowsArray = jsonObject.getJSONArray("rows");

        // 遍历rows节点并格式化时间戳
        for (int i = 0; i < rowsArray.size(); i++) {
            JSONObject rowObject = rowsArray.getJSONObject(i);

            long milliseconds = rowObject.getLongValue("created_at");
            Date date = new Date(milliseconds);
            String formattedTime = sdf.format(date);

            rowObject.put("createdAtFormatted", formattedTime);
        }

        // 将JSONObject转换为格式化的JSON字符串
        return JSON.toJSONString(jsonObject, SerializerFeature.PrettyFormat);
    }
}
package com.halibaduo.Data;

import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author halibaduo
 * Description:
 */
@WebServlet(urlPatterns = "/huanData")
public class HuanData extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);



        // 新闻中心的四大模块（母校新闻、总会快讯、各地动态、通知公告）
        int new1 = mapper.getNew1Num();
        int new2 = mapper.getNew2Num();
        int new3 = mapper.getNew3Num();
        int new4 = mapper.getNew4Num();
        // 主页的三大模块 （校友快讯、母校新闻、通知公告）
        int tabel1 = mapper.getTabel1Num();
        int tabel2 = mapper.getTabel2Num();
        int tabel3 = mapper.getTabel3Num();

        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        String data = "";
        // 由于扇形图的数据时相对值 所以不会大于10 那么我们便将每个数据平均一下
        int sum = new1 + new2 + new3 + new4 + tabel1 + tabel2 + tabel3;
        new1 = Magic(new1, sum);
        new2 = Magic(new2, sum);
        new3 = Magic(new3, sum);
        new4 = Magic(new4, sum);
        tabel1 = Magic(tabel1, sum);
        tabel2 = Magic(tabel2, sum);
        tabel3 = Magic(tabel3, sum);
//        System.out.println("tabel1"+tabel1+",tabel2:"+tabel2+",tabel3:"+tabel3+",new1:"+new1+",new2:"+new2+",new3:"+new3+",new4:"+new4);

        data = "[{\"value\": "+new1+", \"name\": \"新闻中心-母校新闻\"}," +
                "{\"value\": "+new2+", \"name\": \"新闻中心-各地快讯\"}," +
                "{\"value\": "+new3+", \"name\": \"新闻中心-各地动态\"}," +
                "{\"value\": "+new4+", \"name\": \"新闻中心-通知公告\"}," +
                "{\"value\": "+tabel1+", \"name\": \"主页-校友快讯\"}," +
                "{\"value\": "+tabel2+", \"name\": \"主页-母校新闻\"}," +
                "{\"value\": "+tabel3+", \"name\": \"主页-通知公告\"" +
                "}]";
        resp.setCharacterEncoding("UTF-8");
        resp.getWriter().write(data);
    }

    @Override
    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);
    }

    private int Magic(int a , int sum) {
        double a1 = (double)((double)a / (double)sum);
        String s = String.format("%.1f", a1);
        s = s.substring(2, 3);
        int value = Integer.parseInt(s);
        return value;
    }
}
package com.halibaduo.Data;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.Admin;
import com.halibaduo.pojo.User;
import com.halibaduo.pojo1.ZheData1;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/**
 * @author halibaduo
 * Description: 折现图 纪录下管理员本人的不同ip地址下的不同登录次数
 */
@WebServlet(urlPatterns = "/zheData")
public class ZheData extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        // 先获得此时管理员登录人的名字
        HttpSession session = req.getSession();
        Admin admin = (Admin) session.getAttribute("user1");
        String username = admin.getUsername();
//        String username = (String) session.getAttribute("username");

        List<ZheData1> map = mapper.getTimes(username); // 获取登录次数和对应的ip地址

        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

//        System.out.println("map"+map);

        List<Integer> data = new ArrayList<>();
        for (com.halibaduo.pojo1.ZheData1 zheData1 : map) {
            // 获取值
            int value = zheData1.getTimes(); // 横坐标放次数，纵坐标显示ip

            // 将值添加到 List 中
            data.add(value);
        }
//        System.out.println("dataLa:"+data);
        resp.getWriter().write(data.toString());
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);
    }
}
package com.halibaduo.Data;

import com.alibaba.fastjson.JSON;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.Admin;
import com.halibaduo.pojo1.ZheData1;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/**
 * @author halibaduo
 * Description:
 */
@WebServlet(urlPatterns = "/zheDataIp")
public class ZheDataIp extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        // 先获得此时管理员登录人的名字
        HttpSession session = req.getSession();
        Admin admin = (Admin) session.getAttribute("user1");
        String username = admin.getUsername();
//        String username = (String) session.getAttribute("username");

        List<ZheData1> map = mapper.getTimes(username); // 获取登录次数和对应的ip地址

        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放


//        System.out.println("map"+map);

        List<String> data = new ArrayList<>();
        for (com.halibaduo.pojo1.ZheData1 zheData1 : map) {
            // 获取值
            String value = zheData1.getIpAddress(); // 横坐标放次数，纵坐标显示ip

            // 将值添加到 List 中
            data.add(value);
        }
//        System.out.println("我看看:"+data); // 战且输出: [0:0:0:0:0:0:0:1, 127.0.0.1]
//        String str = "[";
//        for (int i = 0; i < data.size(); i++) {
//            str = str + "'" + data.get(i) + "'";
//            if (i != (data.size() - 1)) {
//                str += ",";
//            }
//        }
//        str += "]";
//        System.out.println("哇哈哈:"+str);  // ['0:0:0:0:0:0:0:1','127.0.0.1']
        String jsonString = JSON.toJSONString(data); // 所得：当发先data.toString()不行时就使用转化为json的方式
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);
    }
}
package com.halibaduo.Data;

import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author halibaduo
 * Description:
 */
@WebServlet(urlPatterns = "/zhuData")
public class ZhuData extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        /* 下方是实验数据 */

//        System.out.println("进去过lalala");

//        List<Integer> data = new ArrayList<>();
        /*
        * 服务于柱状图 左边的横坐标是入学年份 右边的纵坐标对应该年份的入学人数
        * */
        List<com.halibaduo.pojo1.ZhuData> map = mapper.getZhuData();  // 左边的对应横坐标 右边的对应纵坐标
//        System.out.println("MapLa:"+map);
        // 遍历 Map
//        for (Map.Entry<List<Integer>, List<Integer>> entry : map.entrySet()) {
//            // 获取第二个 List
//            List<Integer> secondList = entry.getValue();
//
//            // 将第二个 List 中的所有元素添加到 data 中
//            data.addAll(secondList);
//        }

        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        List<Integer> data = new ArrayList<>();
        for (com.halibaduo.pojo1.ZhuData zhuData : map) {
            // 获取值
            int value = zhuData.getCount();

            // 将值添加到 List 中
            data.add(value);
        }

        resp.getWriter().write(data.toString());
//        forZhuData(req, resp, data);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    protected List<Integer> forZhuData(HttpServletRequest req, HttpServletResponse resp, List<Integer> data) {
        return data;
    }
}
package com.halibaduo.Data;

import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

/**
 * @author halibaduo
 * Description: 服务于柱形图纵坐标
 */
@WebServlet(urlPatterns = "/zhuDataYear")
public class ZhuDataYear extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        List<Integer> list = mapper.getZhuDataYear();

        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

//        System.out.println("ListLA:"+list);

        resp.getWriter().write(list.toString());
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);
    }
}
package com.halibaduo.Doc;

import com.alibaba.fastjson.JSON;
import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.pojo.Book;
import com.halibaduo.pojo.Doc;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.pojo.User;
import com.halibaduo.server.BrandService;
import com.halibaduo.util.SqlSessionFactoryUtils;
import com.mysql.cj.Session;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;

/**
 * @author wangjie
 * 服务于进入班级体的班级相册功能
 */
@WebServlet(urlPatterns = "/doc1")
public class Doc1 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了

    }
    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 新追加功能(bug) 哪个班的才能打开哪个班的相册
        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");
        String studentnumber = user.getStudentnumber(); // 得到这个前往查看人的学号了 再通过学号去得到他的
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);
        String classGrade =  mapper.getClassGrade(studentnumber); // 得到班级了 同一班级的查看自己班级的信息 不要乱了


        PageBean<Doc> pageBean = brandService.getDoc1(classGrade);

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
    }
}
package com.halibaduo.Doc;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Doc;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * @author wangjie
 * 暂且废弃的一个doc
 */
@WebServlet(urlPatterns = "/doc2")
public class Doc2 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了

    }
    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<Doc> pageBean = brandService.getDoc2();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
    }
}
package com.halibaduo.Doc;

import com.alibaba.fastjson.JSON;
import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.pojo.Doc;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.pojo.User;
import com.halibaduo.server.BrandService;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;

/**
 * @author wangjie
 */
@WebServlet(urlPatterns = "/doc3")
public class Doc3 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了

    }
    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 新追加功能(bug) 哪个班的才能打开哪个班的相册
        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");
        String studentnumber = user.getStudentnumber(); // 得到这个前往查看人的学号了 再通过学号去得到他的
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);
        String classGrade =  mapper.getClassGrade(studentnumber); // 得到班级了

        PageBean<Doc> pageBean = brandService.getDoc3(classGrade);

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
    }
}
package com.halibaduo.Doc;

import com.alibaba.fastjson.JSONObject;
import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.pojo.User;
import com.halibaduo.server.BrandService;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.Base64;
import java.util.List;

/**
 * @author wangjie
 * 服务于个人信息中心的头像
 */
@WebServlet(urlPatterns = "/doc4")
public class Doc4 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了

    }
    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 新追加功能(bug) 哪个班的才能打开哪个班的相册
        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");
        String studentnumber = user.getStudentnumber(); // 得到这个前往查看人的学号了 再通过学号去得到他的
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        List<User> rows = mapper.getDoc4(studentnumber);
        // 遍历`List`，获取每个`Doc`对象
        byte[] haha = {1, 2};  // 随意一个初始化值
        for (User doc : rows) {
            // 从`Doc`对象中获取`filebytes`属性
            byte[] fileBytes = doc.getFilebytes();

            // 下面两行代码更本用不上 在bjxc和bjyy中也是sample
            // 使用 Base64 编码将二进制数据编码为字符串
//          String base64EncodedImageData = Base64.getEncoder().encodeToString(fileBytes);
//          System.out.println("实验:"+base64EncodedImageData);
//          fileBytes = base64EncodedImageData.getBytes(); // 更换
            haha = fileBytes;
        }

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("filebytes", haha);
        String jsonString = jsonObject.toString();

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
    }
}
package com.halibaduo.face;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;

/**
 * @author 王杰
 * 用户表情测试 用不用的上还得另说
 *
 *              !!!!!!!!!!!! 代码暂且作废 ！！！！！！！！！！！！！！！
 */
@WebServlet(urlPatterns = "/getface")
public class Getface extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        System.out.println(System.getProperty("user.dir"));
        // 获取 JSON 文件的路径
        String filePath = req.getServletContext().getRealPath("./json/web1.json");

        // 打开 JSON 文件
        File file = new File(filePath);
        FileInputStream fis = new FileInputStream(file);

        // 创建一个 PrintWriter 对象，用于将 JSON 文件的内容写入响应流
        PrintWriter out = resp.getWriter();

        // 读取 JSON 文件的内容
        byte[] bytes = new byte[(int) file.length()];
        fis.read(bytes);

        // 将 JSON 文件的内容写入响应流
        out.write(new String(bytes));

        String jsonString = out.toString();

        // 没用 会随机变化
        String goon = "org.apache.catalina.connector.CoyoteWriter@701c870f";
        jsonString = jsonString.replaceAll(goon, "");
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);

        // 关闭 JSON 文件
        fis.close();
        out.close();

    }
}
package com.halibaduo.json;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
* */
@WebServlet("/getallinfo/*")
public class Getallinfo extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<Class> pageBean = brandService.getAllInfo();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.Major;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
* */
@WebServlet("/getallinfo2/*")
public class Getallinfo2 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<Major> pageBean = brandService.getAllInfo2();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.Fast;
import com.halibaduo.pojo.Major;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于首页的校友快讯
* */
@WebServlet("/getallinfo3/*")
public class Getallinfo3 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<Fast> pageBean = brandService.getAllInfo3();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.Fast;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
* */
@WebServlet("/getallinfo4/*")
public class Getallinfo4 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<Fast> pageBean = brandService.getAllInfo4();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.Fast;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于首页的校友公告 没错也是管理员可以发起的公告
* */
@WebServlet("/getallinfo5/*")
public class Getallinfo5 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<Fast> pageBean = brandService.getAllInfo5();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于返回每个页面上方的搜索键后的信息返回功能
* */
@WebServlet("/selectAllServlet/*") // http://localhost:8080/ShiJuan-demo/selectAllServlet
public class SelectAllServlet extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.selectByPage(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void selectByPage(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("能不能成功进去呀~");
        // 1.接受两个参数 当前页码 和 每页展示条数  url?currentPage=1&pageSize=5
//        http://localhost:8080/ShiJuan-demo/selectAllServlet/selectByPage?currentPage=1&pageSize=5
        String _currentPage = req.getParameter("currentPage");
        String _pageSize = req.getParameter("pageSize");

        // 设置在没有选择时的默认值
        int currentPage, pageSize;
        currentPage = Integer.parseInt(_currentPage);
        pageSize = Integer.parseInt(_pageSize);

        // 开始对前面犯下的错进行难受的补偿 靠 我为什么会当时想不到这模糊查询 TM的！！！
        HttpSession session = ((HttpServletRequest) req).getSession();
        String text = (String) session.getAttribute("text");  // 获取的用输入的数据

        PageBean<Brand> pageBean = brandService.SelectByPage(currentPage, pageSize, text);

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json1;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.News;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于新闻中心的母校新闻
* */
@WebServlet("/getxwinfo/*")
public class Getxwinfo extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<News> pageBean = brandService.getAllxw();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json1;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.News;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于新闻中心的中体快讯
* */
@WebServlet("/getxwinfo1/*")
public class Getxwinfo1 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<News> pageBean = brandService.getAllxw1();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json1;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.News;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于新闻中心的中体快讯
* */
@WebServlet("/getxwinfo2/*")
public class Getxwinfo2 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<News> pageBean = brandService.getAllxw2();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json1;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.News;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于新闻中心的中体快讯
* */
@WebServlet("/getxwinfo3/*")
public class Getxwinfo3 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<News> pageBean = brandService.getAllxw3();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json2;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.News;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于新闻中心的母校新闻
* */
@WebServlet("/getjjhinfo/*")
public class Getjjhinfo extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);
    }

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<News> pageBean = brandService.getAlljjh();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json2;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.News;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于新闻中心的母校新闻
* */
@WebServlet("/getjjhinfo1/*")
public class Getjjhinfo1 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);
    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<News> pageBean = brandService.getAlljjh1();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.json2;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.News;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于新闻中心的母校新闻
* */
@WebServlet("/getjjhinfo2/*")
public class Getjjhinfo2 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PageBean<News> pageBean = brandService.getAlljjh2();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.manage;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.pojo.User;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
 * 服务于管理员的操作 查看所有人员信息
* */
@WebServlet("/getallform/*")
public class Getallform extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String _currentPage = req.getParameter("currentPage");
        String _pageSize = req.getParameter("pageSize");

        // 设置在没有选择时的默认值
        int currentPage, pageSize;
        currentPage = Integer.parseInt(_currentPage);
        pageSize = Integer.parseInt(_pageSize);

        PageBean<User> pageBean = brandService.getAllform(currentPage, pageSize);

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.manage;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.Fast;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.pojo.User;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
* @author wangjie
* */
@WebServlet("/getallform1/*")
public class Getallform1 extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("进来了");
        // 1. 调用service查询
//        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
//        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.getAllInfo(req, resp);  // 没有这个怕不是不能成功了
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }

    /**
     * 分页查询
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */

    public void getAllInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String _currentPage = req.getParameter("currentPage");
        String _pageSize = req.getParameter("pageSize");

        // 设置在没有选择时的默认值
        int currentPage, pageSize;
        currentPage = Integer.parseInt(_currentPage);
        pageSize = Integer.parseInt(_pageSize);

        PageBean<Fast> pageBean = brandService.getAllform1(currentPage, pageSize);

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(pageBean);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
    }
}
package com.halibaduo.mapper;

import com.halibaduo.pojo.*;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

import javax.swing.*;
import java.lang.Class;
import java.sql.Timestamp;
import java.util.List;

/**
 * @author wangjie
 */
public interface BrandMapper {
    List<Brand> selectAll();
    void addya(@Param("yearMonth") String yearMonth, @Param("day") int day, @Param("title") String title, @Param("content") String content, @Param("area") String area, @Param("good") long good);

    @Select("select * from paper limit #{begin} , #{size}")
    List<Brand> selectByPage(@Param("begin") int begin,@Param("size") int size);

    @Select("select count(*) from paper")
    int selectTotalCount();

    List<Brand> selectByPage1(@Param("beginYear")int beginYear, @Param("endYear") int endYear, @Param("beginMonth") int beginMonth, @Param("endMonth") int endMonth);

    List<Brand> selectByPage2(@Param("beginYear")int beginYear, @Param("endYear") int endYear, @Param("beginMonth") int beginMonth, @Param("endMonth") int endMonth, @Param("content") String content);

    List<Class> getAllInfo();

    @Select("select count(*) from bj")
    int getTheNum();

    List<Major> getAllInfo2();

    @Select("select count(*) from zy")
    int getTheNum2();

    List<Fast> getAllInfo3();

    @Select("select count(*) from tabel1")
    int getTheNum3();

    @Select("select count(*) from tabel2")
    int getTheNum4();

    List<Fast> getAllInfo4();

    List<Fast> getAllInfo5();

    @Select("select count(*) from tabel3")
    int getTheNum5();

    List<News> getAllxw();

    @Select("select count(*) from new1")
    int getThewx();

    List<News> getAllxw1();

    @Select("select count(*) from new2")
    int getThewx1();

    List<News> getAllxw2();

    @Select("select count(*) from new3")
    int getThewx2();

    List<News> getAllxw3();

    @Select("select count(*) from new4")
    int getThewx3();

    List<Book> getAllbook();

    @Select("select count(*) from book1")
    int getThebook();

    List<Book> getAllbook1();

    @Select("select count(*) from book2")
    int getThebook1();

    String getName(Integer classGrade);

    String findStudentNumber(String studentnumber);

    List<User> getAllform(@Param("begin") int begin,@Param("size") int size);

    @Select("select count(*) from tb_user")
    int getTheform();

    List<Fast> getAllform1(@Param("begin") int begin,@Param("size") int size);

    @Select("select count(*) from tabel3")
    int getTheform1();

    List<News> getAlljjh();

    @Select("select count(*) from jjh1")
    int getThejjh1();

    List<News> getAlljjh1();

    @Select("select count(*) from jjh2")
    int getThejjh2();

    List<News> getAlljjh2();

    @Select("select count(*) from jjh3")
    int getThejjh3();

    List<User> getstudentnumber(int classgrade);

    @Select("select count(*) from tb_user where classgrade = #{classgrade}")
    int getThenumber(int classgrade);

    List<Comments> getAllTwo(String classGrade);

    int getThenumberTWO(String classGrade);

    List<TZ> getOneTwo(String classGrade);


    int getThenumberOneTWO(String classGrade);

    List<Doc> getDoc1(String classGrade);


    int getThenumberDoc1(String classGrade);

    List<Doc> getDoc2();

    @Select("select count(*) from bjxc")
    int getThenumberDoc2();

    List<Doc> getDoc3(String classGrade);


    int getThenumberDoc3(String classGrade);

    List<Brand> selectByPage11(@Param("begin") int begin,@Param("size") int size,@Param("text") String text);

    int selectTotalCount1(String text);

    List<Comments1> getAllTwo1(String name);

    @Select("select count(*) from comments where username2 = #{name}")
    int getThenumberTWO1(String name);

    String getClassGrade(String studentnumber);

    List<User> getDoc4(String studentnumber);

    String findTelephone(String telephone);

    String getBanZhangStudentNumber(int classGrade);
}
package com.halibaduo.mapper;

import com.halibaduo.Data.ZheData;
import com.halibaduo.pojo.Admin;
import com.halibaduo.pojo.Fast;
import com.halibaduo.pojo.TZ;
import com.halibaduo.pojo.User;
import com.halibaduo.pojo1.ZheData1;
import com.halibaduo.pojo1.ZhuData;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

import java.sql.Blob;
import java.sql.Timestamp;
import java.util.List;
import java.util.Map;


/**
 * @author wangjie
 */
public interface UserMapper {
    void add(User user);

    User select(@Param("name") String name,@Param("password") String password, @Param("studentnumber") String studentnumber);

    Admin select1(@Param("username") String username, @Param("password") String password);

    void delete(String studentnumber);

    void delete1(int formation);

    void add1(Fast fast);

    void setAdminInfo(@Param("username") String username, @Param("time") String time,@Param("ipAddress") String ipAddress);


    @Select("select count(*) from tb_user where classgrade = #{classgrade}")
    int setStatusla(int classgrade);

    void getStatus(@Param("classgrade") int classgrade,@Param("studentNumber") String studentNumber);

    String getStatuso(String studentnumber);

    @Select("select classgrade from tb_user where studentnumber = #{studentnumber}")
    int getClasso(String studentnumber);

    void setStatus0(int bValue);

    void setStatus1(String studentnumber);

    void changestudentnumber(@Param("studentnumber") String studentnumber,@Param("studentnumber1") String studentnumber1);

    void changeusername(@Param("username") String username,@Param("studentnumber1") String studentnumber1);

    void change23(@Param("username") String username,@Param("studentnumber") String studentnumber,@Param("studentnumber1") String studentnumber1);

    void changepassword(@Param("password") String password,@Param("studentnumber1") String studentnumber1);

    void change13(@Param("password") String password,@Param("studentnumber") String studentnumber,@Param("studentnumber1") String studentnumber1);

    void change12(@Param("password") String password,@Param("username") String username,@Param("studentnumber1") String studentnumber1);

    void change123(@Param("password") String password,@Param("username") String username,@Param("studentnumber") String studentnumber,@Param("studentnumber1") String studentnumber1);

    String getName(String studentnumber1);

    void addComment(@Param("comment") String comment,@Param("timestamp") Timestamp timestamp,@Param("username") String username,@Param("studentnumber") String studentnumber);

    /**
     * @param tz
     * @param timestamp
     */
    void addBJTZ(@Param("tz") String tz,@Param("timestamp") Timestamp timestamp,@Param("classGrade") String classGrade,@Param("title") String title);

    void addBJXC(@Param("filename") String filename,@Param("fileBytes") byte[] fileBytes);

    void addfile(@Param("series") String series, @Param("fileName") String fileName,@Param("blob") byte[] blob, @Param("studentnumber") String studentnumber, @Param("dola") String dola);

    void addfile1(@Param("series") String series, @Param("fileName") String fileName,@Param("blob") byte[] blob, @Param("studentnumber") String studentnumber, @Param("dola") String dola);

    String getThenewtz(String classGrade);


    void setip(@Param("ipAddress") String ipAddress,@Param("studentnumber") String studentnumber);

    String getusername(String studentnumber);

    void addComment1(@Param("comment") String comment,@Param("timestamp") Timestamp timestamp,@Param("username1") String username1,@Param("username2") String username2,@Param("studentnumber2") String studentnumber2);

    void change();

    void addfile2(@Param("series") String series, @Param("fileName") String fileName,@Param("blob") byte[] blob, @Param("studentnumber") String studentnumber, @Param("dola") String dola);

    void setTrue();

    void change1();

    void setTrue1();

    void gugu();

    void gugu1();

    String getContent(String id);

    String getTitle(String id);

    void away(String id);

    void away1(String id);

    /* 获取最新的一条数据 */
    String getSystemContent();

    void add2(String content);

    void addnews(@Param("url") String url, @Param("data") String data,@Param("content") String content,@Param("truecontent") String truecontent);

    String getContent1(String id);

    String gettruecontent(String id);

    void adddonate(@Param("leibie") String leibie,@Param("money") String money,@Param("name") String name,@Param("telephone") String telephone,@Param("gender") String gender,@Param("words") String words,@Param("addr") String addr,@Param("fp") String fp,@Param("guanxi") String guanxi);

    void addfilepeople(@Param("studentnumber") String studentnumber, @Param("blob") byte[] blob);

    String getStudentnumber(String telephone);

    String getContent11(String id);

    String getTitle11(String id);

    void updatela(String id);


    List<ZhuData> getZhuData();

    List<Integer> getZhuDataYear();

    int getNew1Num();
    int getNew2Num();
    int getNew3Num();
    int getNew4Num();


    int getTabel1Num();
    int getTabel2Num();
    int getTabel3Num();

    List<ZheData1> getTimes(String name);

    String getContentla(String id);

    String getUrl(String id);

    String getdata(String id);

    void deleteAllNotice();

    int getSystemNoticeNum();
}
package com.halibaduo.pojo;

/**
 * @author halibaduo
 * Description:
 */
public class Admin {
    private Long id;
    private String username;
    private String password;

    public Admin() {
    }

    public Admin(Long id, String username, String password) {
        this.id = id;
        this.username = username;
        this.password = password;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public String toString() {
        return "Admin{" +
                "id=" + id +
                ", username='" + username + '\'' +
                ", password='" + password + '\'' +
                '}';
    }
}
package com.halibaduo.pojo;

/**
 * @author 王杰
 * 用于媒体中心的两本书
 */
public class Book {
    private Integer id;
    private String url;
    private long num;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public long getNum() {
        return num;
    }

    public void setNum(long num) {
        this.num = num;
    }

    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", url='" + url + '\'' +
                ", num=" + num +
                '}';
    }
}
package com.halibaduo.pojo;

/**
 * @author @halibaduo
 * 用户搜索时的table展示
 */
public class Brand {
    private Integer id;
    private String yearMonth; // 年月
    private int day; // 日

    private String title; // 区域

    private String content; // 内容

    private String area; // 区域
    private long good; // 点击

    private String text;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getYearMonth() {
        return yearMonth;
    }

    public void setYearMonth(String yearMonth) {
        this.yearMonth = yearMonth;
    }

    public int getDay() {
        return day;
    }

    public void setDay(int day) {
        this.day = day;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getArea() {
        return area;
    }

    public void setArea(String area) {
        this.area = area;
    }

    public long getGood() {
        return good;
    }

    public void setGood(long good) {
        this.good = good;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    @Override
    public String toString() {
        return "Brand{" +
                "id=" + id +
                ", yearMonth='" + yearMonth + '\'' +
                ", day=" + day +
                ", title='" + title + '\'' +
                ", content='" + content + '\'' +
                ", area='" + area + '\'' +
                ", good=" + good +
                ", text='" + text + '\'' +
                '}';
    }
}
package com.halibaduo.pojo;

/**
 * @author wangjie
 */
public class Class {
    private Integer id;
    private long num;
    private String name;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public long getNum() {
        return num;
    }

    public void setNum(long num) {
        this.num = num;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Class{" +
                "id=" + id +
                ", num=" + num +
                ", name='" + name + '\'' +
                '}';
    }
}
package com.halibaduo.pojo;

import java.sql.Timestamp;


/**
 * @author wangjie
 * 评论表的
 */
//@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
public class Comments {
    private Integer id; // 评论的id
    private Integer post_id; // 评论所属帖子的id
    private Integer user_id; // 评论的作者的id
    private String comment; // 评论的内容
    private Timestamp created_at; // 评论创建时间
    private Timestamp updated_at; // 评论最后修改时间

    private String studentnumber;

    public String getStudentnumber() {
        return studentnumber;
    }

    public void setStudentnumber(String studentnumber) {
        this.studentnumber = studentnumber;
    }

    private String username; // 新增 发帖人用户名

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getPost_id() {
        return post_id;
    }

    public void setPost_id(Integer post_id) {
        this.post_id = post_id;
    }

    public Integer getUser_id() {
        return user_id;
    }

    public void setUser_id(Integer user_id) {
        this.user_id = user_id;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public Timestamp getCreated_at() {
        return created_at;
    }

    public void setCreated_at(Timestamp created_at) {
        this.created_at = created_at;
    }

    public Timestamp getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(Timestamp updated_at) {
        this.updated_at = updated_at;
    }

    @Override
    public String toString() {
        return "Comments{" +
                "id=" + id +
                ", post_id=" + post_id +
                ", user_id=" + user_id +
                ", comment='" + comment + '\'' +
                ", created_at=" + created_at +
                ", updated_at=" + updated_at +
                ", studentnumber='" + studentnumber + '\'' +
                ", username='" + username + '\'' +
                '}';
    }
}
package com.halibaduo.pojo;

import java.sql.Timestamp;


/**
 * @author wangjie
 * 评论表的
 */
//@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
public class Comments1 {
    private Integer id; // 评论的id
    private Integer post_id; // 评论所属帖子的id

    private String name;
    private Integer user_id; // 评论的作者的id
    private String comment; // 评论的内容
    private Timestamp created_at; // 评论创建时间
    private Timestamp updated_at; // 评论最后修改时间

    private String username1; // 新增 发帖人用户名

    private String username2; // 对应那啥自己去猜 O.o?

    private String studentnumber;

    public String getStudentnumber() {
        return studentnumber;
    }

    public void setStudentnumber(String studentnumber) {
        this.studentnumber = studentnumber;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getPost_id() {
        return post_id;
    }

    public void setPost_id(Integer post_id) {
        this.post_id = post_id;
    }

    public Integer getUser_id() {
        return user_id;
    }

    public void setUser_id(Integer user_id) {
        this.user_id = user_id;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public Timestamp getCreated_at() {
        return created_at;
    }

    public void setCreated_at(Timestamp created_at) {
        this.created_at = created_at;
    }

    public Timestamp getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(Timestamp updated_at) {
        this.updated_at = updated_at;
    }

    public String getUsername1() {
        return username1;
    }

    public void setUsername1(String username1) {
        this.username1 = username1;
    }

    public String getUsername2() {
        return username2;
    }

    public void setUsername2(String username2) {
        this.username2 = username2;
    }

    @Override
    public String toString() {
        return "Comments1{" +
                "id=" + id +
                ", post_id=" + post_id +
                ", name='" + name + '\'' +
                ", user_id=" + user_id +
                ", comment='" + comment + '\'' +
                ", created_at=" + created_at +
                ", updated_at=" + updated_at +
                ", username1='" + username1 + '\'' +
                ", username2='" + username2 + '\'' +
                ", studentnumber='" + studentnumber + '\'' +
                '}';
    }
}
package com.halibaduo.pojo;

import java.sql.Blob;
import java.util.Arrays;

/**
 * @author 86199
 */
public class Doc {
    private Integer id;
    private String fileName;
    private byte[] filebytes;

    private String series;

    private String dola;

    public String getDola() {
        return dola;
    }

    public void setDola(String dola) {
        this.dola = dola;
    }

    public String getSeries() {
        return series;
    }

    public void setSeries(String series) {
        this.series = series;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public byte[] getFilebytes() {
        return filebytes;
    }

    public void setFilebytes(byte[] filebytes) {
        this.filebytes = filebytes;
    }

    @Override
    public String toString() {
        return "Doc{" +
                "id=" + id +
                ", fileName='" + fileName + '\'' +
                ", filebytes=" + Arrays.toString(filebytes) +
                ", series='" + series + '\'' +
                ", dola='" + dola + '\'' +
                '}';
    }
}
package com.halibaduo.pojo;

/**
 * @author wangjie
 */
public class Fast {
    private Integer id;
    private String url;
    private String data;
    private String content;

    private String truecontent;

    public String getTruecontent() {
        return truecontent;
    }

    public void setTruecontent(String truecontent) {
        this.truecontent = truecontent;
    }

    private String truecomment;

    public String getTruecomment() {
        return truecomment;
    }

    public void setTruecomment(String truecomment) {
        this.truecomment = truecomment;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    @Override
    public String toString() {
        return "Fast{" +
                "id=" + id +
                ", url='" + url + '\'' +
                ", data='" + data + '\'' +
                ", content='" + content + '\'' +
                ", truecontent='" + truecontent + '\'' +
                ", truecomment='" + truecomment + '\'' +
                '}';
    }
}
package com.halibaduo.pojo;

/**
 * @author wangjie
 */
public class Major {
    private Integer id;
    private long num;
    private String name;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public long getNum() {
        return num;
    }

    public void setNum(long num) {
        this.num = num;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Major{" +
                "id=" + id +
                ", num=" + num +
                ", name='" + name + '\'' +
                '}';
    }
}
package com.halibaduo.pojo;

/**
 * @author wangjie
 * 第三个模块的 新闻中心的母校新闻
 */
public class News {
    private Integer id;
    private String day;
    private String date;
    private String url1;
    private String title;
    private String url2;
    private String content;
    private String type;
    private long goods;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getDay() {
        return day;
    }

    public void setDay(String day) {
        this.day = day;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getUrl1() {
        return url1;
    }

    public void setUrl1(String url1) {
        this.url1 = url1;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUrl2() {
        return url2;
    }

    public void setUrl2(String url2) {
        this.url2 = url2;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public long getGoods() {
        return goods;
    }

    public void setGoods(long goods) {
        this.goods = goods;
    }

    @Override
    public String toString() {
        return "News{" +
                "id=" + id +
                ", day='" + day + '\'' +
                ", date='" + date + '\'' +
                ", url1='" + url1 + '\'' +
                ", title='" + title + '\'' +
                ", url2='" + url2 + '\'' +
                ", content='" + content + '\'' +
                ", type='" + type + '\'' +
                ", goods=" + goods +
                '}';
    }
}
package com.halibaduo.pojo;

import java.util.ArrayList;
import java.util.List;

/**
* @author 王杰
 * 服务于分页查询
* */
public class PageBean<T> {
    // 总记录数
    private int totalCount;
    // 当前页数据
    private List<T> rows;
    private List<T> list;

    public void Pagebean() {
        list = new ArrayList<>();
    }
    // 我认为增加的带啊吗
    public void add(T item) {
        list.add(item);
    }
    public List<T> getList(){
        return list;
    }

    public int getTotalCount() {
        return totalCount;
    }


    public void setTotalCount(int totalCount) {
        this.totalCount = totalCount;
    }

    public List<T> getRows() {
        return rows;
    }

    public void setRows(List<T> rows) {
        this.rows = rows;
    }
}
package com.halibaduo.pojo;

/**
 * @author wangjie
 * 服务于进入班级体的上面的信息输出
 */
public class People {
    private Integer id;
    private String name;
    private String classGrade;
    private String status;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getClassGrade() {
        return classGrade;
    }

    public void setClassGrade(String classGrade) {
        this.classGrade = classGrade;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "People{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", classGrade='" + classGrade + '\'' +
                ", status='" + status + '\'' +
                '}';
    }
}
package com.halibaduo.pojo;

import java.sql.Timestamp;

/**
 * @author wangjie
 * 服务于通知
 */
public class TZ {
    private Integer id;
    private Timestamp time;
    private String content;

    private String title;

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Timestamp getTime() {
        return time;
    }

    public void setTime(Timestamp time) {
        this.time = time;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    @Override
    public String toString() {
        return "TZ{" +
                "id=" + id +
                ", time=" + time +
                ", content='" + content + '\'' +
                ", title='" + title + '\'' +
                '}';
    }
}
package com.halibaduo.pojo;

import java.util.Arrays;

/**
 * @author wangjie
 */
public class User {
    private Integer id;
    private String email;
    private String password;
    private String username;
    private String telephone;
    private String name;
    private int gender; // 0: 男 1:女
    private String year_month_first;
    private String year_month_last;
    private Integer faculty; // 院系 和下面三个都是一样的直接就是按照value的值来
    private Integer major; // 专业
    private Integer classgrade; // 班级
    private String studentnumber; // 学号

    private byte[] filebytes; // 个人头像

    public byte[] getFilebytes() {
        return filebytes;
    }

    public void setFilebytes(byte[] filebytes) {
        this.filebytes = filebytes;
    }

    private Integer status;

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getTelephone() {
        return telephone;
    }

    public void setTelephone(String telephone) {
        this.telephone = telephone;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getGender() {
        return gender;
    }

    public void setGender(int gender) {
        this.gender = gender;
    }

    public String getYear_month_first() {
        return year_month_first;
    }

    public void setYear_month_first(String year_month_first) {
        this.year_month_first = year_month_first;
    }

    public String getYear_month_last() {
        return year_month_last;
    }

    public void setYear_month_last(String year_month_last) {
        this.year_month_last = year_month_last;
    }

    public Integer getFaculty() {
        return faculty;
    }

    public void setFaculty(Integer faculty) {
        this.faculty = faculty;
    }

    public Integer getMajor() {
        return major;
    }

    public void setMajor(Integer major) {
        this.major = major;
    }

    public Integer getClassgrade() {
        return classgrade;
    }

    public void setClassgrade(Integer classgrade) {
        this.classgrade = classgrade;
    }

    public String getStudentnumber() {
        return studentnumber;
    }

    public void setStudentnumber(String studentnumber) {
        this.studentnumber = studentnumber;
    }

    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", email='" + email + '\'' +
                ", password='" + password + '\'' +
                ", username='" + username + '\'' +
                ", telephone='" + telephone + '\'' +
                ", name='" + name + '\'' +
                ", gender=" + gender +
                ", year_month_first='" + year_month_first + '\'' +
                ", year_month_last='" + year_month_last + '\'' +
                ", faculty=" + faculty +
                ", major=" + major +
                ", classgrade=" + classgrade +
                ", studentnumber='" + studentnumber + '\'' +
                ", filebytes=" + Arrays.toString(filebytes) +
                ", status=" + status +
                '}';
    }
}
package com.halibaduo.pojo1;

/**
 * @author halibaduo
 * Description:
 */
public class ZheData1 {
    private String ipAddress; // ip地址
    private int times; // 次数

    @Override
    public String toString() {
        return "ZheData1{" +
                "ipAddress='" + ipAddress + '\'' +
                ", times=" + times +
                '}';
    }

    public String getIpAddress() {
        return ipAddress;
    }

    public void setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
    }

    public int getTimes() {
        return times;
    }

    public void setTimes(int times) {
        this.times = times;
    }
}
package com.halibaduo.pojo1;

import java.time.Year;

/**
 * @author halibaduo
 * Description:
 */
public class ZhuData {
    private Year yearMonthFirst;
    private int count;

    public Year getYearMonthFirst() {
        return yearMonthFirst;
    }

    public void setYearMonthFirst(Year yearMonthFirst) {
        this.yearMonthFirst = yearMonthFirst;
    }

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }
}
package com.halibaduo.server;

import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.pojo.*;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import java.lang.Class;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.util.Base64;
import java.util.List;

/**
* @author wangjie
 * 服务于json+axios小案例  用户增加数据库内容的
* */
public class BrandService {
    public List<Brand> selectAll() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        return mapper.selectAll();
    }

    public void add(Brand brand) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        String yearMonth = brand.getYearMonth();
        int day1 = brand.getDay();
        String title = brand.getTitle();
        String content = brand.getContent();
        String area = brand.getArea();
        long good = brand.getGood();
        yearMonth = new String(yearMonth.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        title = new String(title.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        content = new String(content.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        area = new String(area.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
//        System.out.println("证明到了这一步");
        mapper.addya(yearMonth, day1, title, content, area, good);

        // 现在只剩乱码问题了
    }
    /**
     *
     * @param currentPage 当前页码
     * @param pageSize 每页展示条数
     * @return
     */
    public PageBean<Brand> SelectByPage(int currentPage, int pageSize, String text) {
//        System.out.println("接受到的currentPage:"+currentPage+"接受到的pageSize:"+pageSize);
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 我的currentPage不做页码 只做开始的id下表
        // 计算开始索引
        int begin = currentPage;
        // 计算查询条目数
        int size = pageSize;

        if (text.equals("") || text == null) {
//            System.out.println("进入到上面的");
            // 查询当前页数据
            if(begin >= 1){
                begin = begin - 1;
            }
            List<Brand> rows = mapper.selectByPage(begin, size);
            // 查询总记录数
            int totalCount = mapper.selectTotalCount();

            // 分装pageBean
            PageBean<Brand> pageBean = new PageBean<>();
            pageBean.setRows(rows);
            pageBean.setTotalCount(totalCount);
            return pageBean;
        } else {
//            System.out.println("进入到下面的");
//            System.out.println("text:"+text);
            begin = 1;
            size = 10000;

            // 这里传入几都无所谓 因为已经不再受这个的约束了

            // 查询当前页数据
            List<Brand> rows = mapper.selectByPage11(begin, size, text);
            // 查询总记录数
            int totalCount = mapper.selectTotalCount1(text);

            // 分装pageBean
            PageBean<Brand> pageBean = new PageBean<>();
            pageBean.setRows(rows);
            pageBean.setTotalCount(totalCount);
            return pageBean;
        }


    }

    public PageBean<Brand> SelectByPage1(int timela) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        int beginYear =0;
        // 计算查询条目数
        int endYear = 0;
        int beginMonth = 0;
        int endMonth = 0;
        // 获取当前日期
        LocalDate currentDate = LocalDate.now();
        // 获取年份
        int year = currentDate.getYear();
        // 获取月份
        int month = currentDate.getMonthValue();
        // 先设置年限的选择timela值 1：全部 2.近一个月 3.近半年 4.近一年
        // 规范  -----  年份[beginYear, endYear) 月[beginMonth, endMonth)
        if (timela == 1){
            beginYear = 0;
            endYear = 9999; // 这个是假设年份 仅仅代表最末年份
            beginMonth = 0;
            endMonth = 32;
        } else if (timela == 2) {
            beginYear = year;
            endYear = year+1;
            beginMonth = month - 1;
            if (beginMonth == 0) { // 这说明现在时间为一月
                beginYear = beginYear - 1;
                endYear = endYear - 1;
                beginMonth = 11;
                endMonth = 12;
            } else { // 这代表当前不是一月份
                endMonth = month + 1;
            }
        } else if (timela == 3) {
            beginYear = year;
            endYear = year+1;
            beginMonth = month - 6;
            if (beginMonth == 0) { // 这说明现在时间为六月
                beginYear = beginYear - 1;
                endYear = endYear - 1;
                beginMonth = 11;
                endMonth = 6;
            } else { // 这代表当前不是一月份
                endMonth = month + 1;
                // 那说明一定是7-12月 那么末月+6后值一定超过12
                beginYear = beginYear + 1;
                endYear = endYear + 1;
                endMonth = (month + 7)/12;
            }
        } else if (timela == 4) {
            // 近一年则月份直接照搬 年份变化
            beginYear = year - 1;
            endYear = year + 2;
            beginMonth = month;
            endMonth = month;
        }

        List<Brand> rows = mapper.selectByPage1(beginYear, endYear, beginMonth, endMonth);
        // 这里一定要留意数据库中的数据存储形式 是2023-04 所以有必要先获取数据库中的数据再细节分析

        // 找bug
//        System.out.println("beginyear:"+beginYear);
//        System.out.println("endyear:"+endYear);
//        System.out.println("beginMonth:"+beginMonth);
//        System.out.println("endMonth:"+endMonth);



        // 查询总记录数
        int totalCount = mapper.selectTotalCount();

        // 分装pageBean
        PageBean<Brand> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    // 重载
    public PageBean<Brand> SelectByPage1(int timela, String content) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        int beginYear =0;
        // 计算查询条目数
        int endYear = 0;
        int beginMonth = 0;
        int endMonth = 0;
        // 获取当前日期
        LocalDate currentDate = LocalDate.now();
        // 获取年份
        int year = currentDate.getYear();
        // 获取月份
        int month = currentDate.getMonthValue();
        // 先设置年限的选择timela值 1：全部 2.近一个月 3.近半年 4.近一年
        // 规范  -----  年份[beginYear, endYear) 月[beginMonth, endMonth)
        if (timela == 1){
            beginYear = 0;
            endYear = 9999; // 这个是假设年份 仅仅代表最末年份
            beginMonth = 0;
            endMonth = 32;
        } else if (timela == 2) {
            beginYear = year;
            endYear = year+1;
            beginMonth = month - 1;
            if (beginMonth == 0) { // 这说明现在时间为一月
                beginYear = beginYear - 1;
                endYear = endYear - 1;
                beginMonth = 11;
                endMonth = 12;
            } else { // 这代表当前不是一月份
                endMonth = month + 1;
            }
        } else if (timela == 3) {
            beginYear = year;
            endYear = year+1;
            beginMonth = month - 6;
            if (beginMonth == 0) { // 这说明现在时间为六月
                beginYear = beginYear - 1;
                endYear = endYear - 1;
                beginMonth = 11;
                endMonth = 6;
            } else { // 这代表当前不是一月份
                endMonth = month + 1;
                // 那说明一定是7-12月 那么末月+6后值一定超过12
                beginYear = beginYear + 1;
                endYear = endYear + 1;
                endMonth = (month + 7)/12;
            }
        } else if (timela == 4) {
            // 近一年则月份直接照搬 年份变化
            beginYear = year - 1;
            endYear = year + 2;
            beginMonth = month;
            endMonth = month;
        }

        List<Brand> rows = mapper.selectByPage2(beginYear, endYear, beginMonth, endMonth, content);
        // 这里一定要留意数据库中的数据存储形式 是2023-04 所以有必要先获取数据库中的数据再细节分析

        // 找bug
//        System.out.println("beginyear:"+beginYear);
//        System.out.println("endyear:"+endYear);
//        System.out.println("beginMonth:"+beginMonth);
//        System.out.println("endMonth:"+endMonth);



        // 查询总记录数
        int totalCount = mapper.selectTotalCount();

        // 分装pageBean
        PageBean<Brand> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Class> getAllInfo() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<Class> rows = mapper.getAllInfo();

        // 分装pageBean
        PageBean<Class> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getTheNum();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Major> getAllInfo2() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<Major> rows = mapper.getAllInfo2();

        // 分装pageBean
        PageBean<Major> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getTheNum2();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Fast> getAllInfo3() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<Fast> rows = mapper.getAllInfo3();

        // 分装pageBean
        PageBean<Fast> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getTheNum3();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Fast> getAllInfo4() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<Fast> rows = mapper.getAllInfo4();

        // 分装pageBean
        PageBean<Fast> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getTheNum4();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Fast> getAllInfo5() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<Fast> rows = mapper.getAllInfo5();

        // 分装pageBean
        PageBean<Fast> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getTheNum5();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<News> getAllxw() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<News> rows = mapper.getAllxw();

        // 分装pageBean
        PageBean<News> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThewx();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<News> getAllxw1() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<News> rows = mapper.getAllxw1();

        // 分装pageBean
        PageBean<News> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThewx1();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<News> getAllxw2() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<News> rows = mapper.getAllxw2();

        // 分装pageBean
        PageBean<News> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThewx2();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<News> getAllxw3() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<News> rows = mapper.getAllxw3();

        // 分装pageBean
        PageBean<News> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThewx3();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Book> getAllbook() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<Book> rows = mapper.getAllbook();

        // 分装pageBean
        PageBean<Book> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThebook();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Book> getAllbook1() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<Book> rows = mapper.getAllbook1();

        // 分装pageBean
        PageBean<Book> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThebook1();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<User> getAllform(int currentPage, int pageSize) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        currentPage = currentPage - 1;
        // 获取所有信息
        List<User> rows = mapper.getAllform(currentPage, pageSize);

        // 分装pageBean
        PageBean<User> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getTheform();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Fast> getAllform1(int currentPage, int pageSize) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        currentPage = currentPage - 1;
        // 获取所有信息
        List<Fast> rows = mapper.getAllform1(currentPage, pageSize);

        // 分装pageBean
        PageBean<Fast> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getTheform1();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<News> getAlljjh() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<News> rows = mapper.getAlljjh();

        // 分装pageBean
        PageBean<News> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThejjh1();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<News> getAlljjh1() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<News> rows = mapper.getAlljjh1();

        // 分装pageBean
        PageBean<News> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThejjh2();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<News> getAlljjh2() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<News> rows = mapper.getAlljjh2();

        // 分装pageBean
        PageBean<News> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThejjh3();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<User> getstudentnumber(int classgrade) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<User> rows = mapper.getstudentnumber(classgrade);

        // 分装pageBean
        PageBean<User> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThenumber(classgrade);
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Comments> getTwo(String classGrade) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);



        // 获取所有信息
        List<Comments> rows = mapper.getAllTwo(classGrade);

        // 分装pageBean
        PageBean<Comments> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThenumberTWO(classGrade);
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<TZ> getOneTwo(String classGrade) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<TZ> rows = mapper.getOneTwo(classGrade);

        // 分装pageBean
        PageBean<TZ> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThenumberOneTWO(classGrade);
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Doc> getDoc1(String classGrade) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 得要求我到底是哪个系列的

        // 获取所有信息
        List<Doc> rows = mapper.getDoc1(classGrade);
        // 遍历`List`，获取每个`Doc`对象
        for (Doc doc : rows) {
            // 从`Doc`对象中获取`filebytes`属性
            byte[] fileBytes = doc.getFilebytes();

            // 使用 Base64 编码将二进制数据编码为字符串
            String base64EncodedImageData = Base64.getEncoder().encodeToString(fileBytes);
//            System.out.println("实验:"+base64EncodedImageData);

            fileBytes = base64EncodedImageData.getBytes(); // 更换
        }


        // 分装pageBean
        PageBean<Doc> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThenumberDoc1(classGrade);
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Doc> getDoc2() {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<Doc> rows = mapper.getDoc2();

        // 分装pageBean
        PageBean<Doc> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThenumberDoc2();
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Doc> getDoc3(String classGrade) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<Doc> rows = mapper.getDoc3(classGrade);

        // 分装pageBean
        PageBean<Doc> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThenumberDoc3(classGrade);
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public PageBean<Comments1> getTwo1(String name) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 获取所有信息
        List<Comments1> rows = mapper.getAllTwo1(name);

        // 分装pageBean
        PageBean<Comments1> pageBean = new PageBean<>();
        pageBean.setRows(rows);
        int totalCount = mapper.getThenumberTWO1(name);
        pageBean.setTotalCount(totalCount);

        return pageBean;
    }

    public String getBanZhangStudentNumber(int classGrade) {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        String BanZhangStudentNumber = mapper.getBanZhangStudentNumber(classGrade);

        return BanZhangStudentNumber;
    }
}
package com.halibaduo.servlet;

import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
* @author 王杰
 * 作用是使用异步的Ajax来验证用户名是否存在的功能 用户名在这里等效studentnumber -- 学生的学号 （这是全部检测里面的唯一标准）
* */
@WebServlet("/selectUserServlet")
public class SelectUserServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 1.接受用户名
        String studentnumber = req.getParameter("studentnumber");


        String name = mapper.findStudentNumber(studentnumber);

        if(name != null){ // 代表存在该用户
            // 3.响应标记
            boolean flag = true;
            resp.getWriter().write(""+flag);
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }
}
package com.halibaduo.servlet;

import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
* @author 王杰
 * 作用是使用异步的Ajax来验证电话号码是否存在的功能 电话号码在这里等效telephone
* */
@WebServlet("/selectUserServlet1")
public class SelectUserServlet1 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

        // 1.接受用户名
        String telephone = req.getParameter("telephone");


        String name = mapper.findTelephone(telephone);

        if(name != null){ // 代表存在该用户
            // 3.响应标记
            boolean flag = true;
            resp.getWriter().write(""+flag);
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }
}
package com.halibaduo.util;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Random;

/**
 * 生成验证码工具类
 * @author 王杰
 */
public class CheckCodeUtil {

    public static final String VERIFY_CODES = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static Random random = new Random();

    public static void main(String[] args) throws IOException {
        OutputStream fos= new FileOutputStream("d://a.jpg");
        String checkCode = CheckCodeUtil.outputVerifyImage(100, 50, fos, 4);
//        System.out.println(checkCode); // 成功获取
    }


    /**
     * 输出随机验证码图片流,并返回验证码值（一般传入输出流，响应response页面端，Web项目用的较多）
     *
     * @param width  图片宽度
     * @param height 图片高度
     * @param os 输出流
     * @param verifySize 数据长度
     * @return 验证码数据
     * @throws IOException
     */
    public static String outputVerifyImage(int width, int height, OutputStream os, int verifySize) throws IOException {
        String verifyCode = generateVerifyCode(verifySize);
        outputImage(width, height, os, verifyCode);
        return verifyCode;
    }

    /**
     * 使用系统默认字符源生成验证码
     *
     * @param verifySize 验证码长度
     * @return
     */
    public static String generateVerifyCode(int verifySize) {
        return generateVerifyCode(verifySize, VERIFY_CODES);
    }

    /**
     * 使用指定源生成验证码
     *
     * @param verifySize 验证码长度
     * @param sources    验证码字符源
     * @return
     */
    public static String generateVerifyCode(int verifySize, String sources) {
        // 未设定展示源的字码，赋默认值大写字母+数字
        if (sources == null || sources.length() == 0) {
            sources = VERIFY_CODES;
        }
        int codesLen = sources.length();
        Random rand = new Random(System.currentTimeMillis());
        StringBuilder verifyCode = new StringBuilder(verifySize);
        for (int i = 0; i < verifySize; i++) {
            verifyCode.append(sources.charAt(rand.nextInt(codesLen - 1)));
        }
        return verifyCode.toString();
    }

    /**
     * 生成随机验证码文件,并返回验证码值 (生成图片形式，用的较少)
     *
     * @param w
     * @param h
     * @param outputFile
     * @param verifySize
     * @return
     * @throws IOException
     */
    public static String outputVerifyImage(int w, int h, File outputFile, int verifySize) throws IOException {
        String verifyCode = generateVerifyCode(verifySize);
        outputImage(w, h, outputFile, verifyCode);
        return verifyCode;
    }



    /**
     * 生成指定验证码图像文件
     *
     * @param w
     * @param h
     * @param outputFile
     * @param code
     * @throws IOException
     */
    public static void outputImage(int w, int h, File outputFile, String code) throws IOException {
        if (outputFile == null) {
            return;
        }
        File dir = outputFile.getParentFile();
        //文件不存在
        if (!dir.exists()) {
            //创建
            dir.mkdirs();
        }
        try {
            outputFile.createNewFile();
            FileOutputStream fos = new FileOutputStream(outputFile);
            outputImage(w, h, fos, code);
            fos.close();
        } catch (IOException e) {
            throw e;
        }
    }

    /**
     * 输出指定验证码图片流
     *
     * @param w
     * @param h
     * @param os
     * @param code
     * @throws IOException
     */
    public static void outputImage(int w, int h, OutputStream os, String code) throws IOException {
        int verifySize = code.length();
        BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Random rand = new Random();
        Graphics2D g2 = image.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // 创建颜色集合，使用java.awt包下的类
        Color[] colors = new Color[5];
        Color[] colorSpaces = new Color[]{Color.WHITE, Color.CYAN,
                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,
                Color.PINK, Color.YELLOW};
        float[] fractions = new float[colors.length];
        for (int i = 0; i < colors.length; i++) {
            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];
            fractions[i] = rand.nextFloat();
        }
        Arrays.sort(fractions);
        // 设置边框色
        g2.setColor(Color.GRAY);
        g2.fillRect(0, 0, w, h);

        Color c = getRandColor(200, 250);
        // 设置背景色
        g2.setColor(c);
        g2.fillRect(0, 2, w, h - 4);

        // 绘制干扰线
        Random random = new Random();
        // 设置线条的颜色
        g2.setColor(getRandColor(160, 200));
        for (int i = 0; i < 20; i++) {
            int x = random.nextInt(w - 1);
            int y = random.nextInt(h - 1);
            int xl = random.nextInt(6) + 1;
            int yl = random.nextInt(12) + 1;
            g2.drawLine(x, y, x + xl + 40, y + yl + 20);
        }

        // 添加噪点
        // 噪声率
        float yawpRate = 0.05f;
        int area = (int) (yawpRate * w * h);
        for (int i = 0; i < area; i++) {
            int x = random.nextInt(w);
            int y = random.nextInt(h);
            // 获取随机颜色
            int rgb = getRandomIntColor();
            image.setRGB(x, y, rgb);
        }
        // 添加图片扭曲
        shear(g2, w, h, c);

        g2.setColor(getRandColor(100, 160));
        int fontSize = h - 4;
        Font font = new Font("Algerian", Font.ITALIC, fontSize);
        g2.setFont(font);
        char[] chars = code.toCharArray();
        for (int i = 0; i < verifySize; i++) {
            AffineTransform affine = new AffineTransform();
            affine.setToRotation(Math.PI / 4 * rand.nextDouble() * (rand.nextBoolean() ? 1 : -1), (w / verifySize) * i + fontSize / 2, h / 2);
            g2.setTransform(affine);
            g2.drawChars(chars, i, 1, ((w - 10) / verifySize) * i + 5, h / 2 + fontSize / 2 - 10);
        }

        g2.dispose();
        ImageIO.write(image, "jpg", os);
    }

    /**
     * 随机颜色
     *
     * @param fc
     * @param bc
     * @return
     */
    private static Color getRandColor(int fc, int bc) {
        if (fc > 255) {
            fc = 255;
        }
        if (bc > 255) {
            bc = 255;
        }
        int r = fc + random.nextInt(bc - fc);
        int g = fc + random.nextInt(bc - fc);
        int b = fc + random.nextInt(bc - fc);
        return new Color(r, g, b);
    }

    private static int getRandomIntColor() {
        int[] rgb = getRandomRgb();
        int color = 0;
        for (int c : rgb) {
            color = color << 8;
            color = color | c;
        }
        return color;
    }

    private static int[] getRandomRgb() {
        int[] rgb = new int[3];
        for (int i = 0; i < 3; i++) {
            rgb[i] = random.nextInt(255);
        }
        return rgb;
    }

    private static void shear(Graphics g, int w1, int h1, Color color) {
        shearX(g, w1, h1, color);
        shearY(g, w1, h1, color);
    }

    private static void shearX(Graphics g, int w1, int h1, Color color) {

        int period = random.nextInt(2);

        boolean borderGap = true;
        int frames = 1;
        int phase = random.nextInt(2);

        for (int i = 0; i < h1; i++) {
            double d = (double) (period >> 1)
                    * Math.sin((double) i / (double) period
                    + (6.2831853071795862D * (double) phase)
                    / (double) frames);
            g.copyArea(0, i, w1, 1, (int) d, 0);
            if (borderGap) {
                g.setColor(color);
                g.drawLine((int) d, i, 0, i);
                g.drawLine((int) d + w1, i, w1, i);
            }
        }

    }

    private static void shearY(Graphics g, int w1, int h1, Color color) {

        int period = random.nextInt(40) + 10; // 50;

        boolean borderGap = true;
        int frames = 20;
        int phase = 7;
        for (int i = 0; i < w1; i++) {
            double d = (double) (period >> 1)
                    * Math.sin((double) i / (double) period
                    + (6.2831853071795862D * (double) phase)
                    / (double) frames);
            g.copyArea(i, 0, 1, h1, 0, (int) d);
            if (borderGap) {
                g.setColor(color);
                g.drawLine(i, (int) d, i, 0);
                g.drawLine(i, (int) d + h1, i, h1);
            }

        }

    }
}



package com.halibaduo.util;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

/**
 * @author 王杰
 */
public class SqlSessionFactoryUtils {
    private static SqlSessionFactory sqlSessionFactory;

    static {
        // 静态代码只会随着类的加载而自动执行,且只会执行一次
        try {
            String resource = "mybatis-config.xml";  // 就在resources根目录下
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static SqlSessionFactory getSqlSessionFactory() {
        return  sqlSessionFactory;
    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;


import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;

/**
 * @author 王杰
 * 注册 register.html
 * problem: 问题是正常的cookie（解码问题） session（会话问题）
 */
@WebServlet(urlPatterns = "/addServlet")
public class AddinfoServlet extends HttpServlet {
    public static int flag1 = 0; // 用户判断下面的status是否更新完整
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        // 获得用户输入的验证码
        String checkCode = req.getParameter("checkCode");
        // 再获取程序生成的
//        HttpSession session = req.getSession();
//        String checkCodeGen = (String) session.getAttribute("checkCodeGen");
//        System.out.println("输入的验证码:"+checkCode);
        String checkCodeGen = CheckCodeServlet.yanzhenma;
//        System.out.println("验证码本为:"+checkCodeGen);

        String email = req.getParameter("email");
        String username = req.getParameter("username");
        String password = req.getParameter("password");
        String telephone = req.getParameter("telephone");
        String name = req.getParameter("name");
        int gender = Integer.parseInt(req.getParameter("gender")); // 0:男 1:女

//        Date year_month_first = Date.valueOf(req.getParameter("year_month_first"));
//        Date year_month_last = Date.valueOf(req.getParameter("year_month_last"));
        String yearMonthValue = req.getParameter("year_month_first").trim();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM");
        YearMonth yearMonth = YearMonth.parse(yearMonthValue, formatter); // year_month_first
        String yearMonthValue1 = req.getParameter("year_month_last").trim();
        DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("yyyy-MM");
        YearMonth yearMonth1 = YearMonth.parse(yearMonthValue, formatter); // year_month_last

        int faculty = Integer.parseInt(req.getParameter("faculty")); // 院系
        int major = Integer.parseInt(req.getParameter("major")); // 专业
        int classGrade = Integer.parseInt(req.getParameter("classgrade")); // 班级
        String studentNumber = req.getParameter("studentnumber"); // 学号

        email = new String(email.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        username = new String(username.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        password = new String(password.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        telephone = new String(telephone.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        name = new String(name.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        studentNumber = new String(studentNumber.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);



        resp.setContentType("text/html;charset=utf-8");
        PrintWriter writer = resp.getWriter();
        if (!checkCodeGen.equalsIgnoreCase(checkCode)) {
            // 如果验证码输入错误就跳回原页面
//            req.setAttribute("Code", "验证码错误"); // 这个代码无法产生效果
            writer.write("<h2>您填写的验证码为："+checkCode+"</h2>");
            writer.write("<h2>系统给出的的验证码为："+checkCodeGen+"</h2>");
            writer.write("<h2>未防止机器暴力注册，所以请您回到上一步重新填写注册信息</h2>");
//            resp.setHeader("refresh", "0;URL=pages/register.html");

        }

        // 将没有必要的System.out.println()输出出来暂且不用显示
//        System.out.println("email:"+email);
//        System.out.println("username:"+username);
//        System.out.println("password:"+password);
//        System.out.println("telephone:"+telephone);
//        System.out.println("name:"+name);
//        System.out.println("gender:"+gender);
//        System.out.println("faculty:"+faculty);
//        System.out.println("major:"+major);
//        System.out.println("classgrade:"+classGrade);
//        System.out.println("studentNumber:"+studentNumber);
        String yearMonthString = yearMonth.format(DateTimeFormatter.ofPattern("yyyy-MM"));
        String yearMonthString1 = yearMonth1.format(DateTimeFormatter.ofPattern("yyyy-MM"));
        yearMonthString = yearMonthString.substring(0, 4);
        yearMonthString1 = yearMonthString1.substring(0, 4);
//        System.out.println("year_month_first:"+yearMonthString);
//        System.out.println("year_month_last:"+yearMonthString1);

        // 无论在页面上填写的毕业年份是多少 在这都是入学年份+4
        int firstyearmonth = Integer.parseInt(yearMonthString);
        int lastyearmonth = firstyearmonth + 4 ;
        yearMonthString1 = String.valueOf(lastyearmonth);

        /* 数据获取成功 显示正常 */

        //  将必要的三大数据储存为session，以备后续使用
        //  1. 真实姓名:name  2.学号:studentnumber  3.密码:password
        HttpSession session = req.getSession();
        session.setAttribute("name", name);
        session.setAttribute("studentnumber", studentNumber);
        session.setAttribute("password", password);
        //   暂且显示没有什么异常 后续待观察

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        User user = null;
        try{
            user = new User();
            user.setEmail(email);
            user.setUsername(username);
            user.setPassword(password);
            user.setTelephone(telephone);
            user.setName(name);
            user.setGender(gender);
            user.setFaculty(faculty);
            user.setMajor(major);
            user.setClassgrade(classGrade);
            user.setStudentnumber(studentNumber);
            user.setYear_month_first(yearMonthString);
            user.setYear_month_last(yearMonthString1);

            session.setAttribute("user", user); // 存入session
        } catch (Exception e) {
            e.printStackTrace();
        }

        // 向数据库中增加用户 （做一层安全保护）
        User user1 = mapper.select(name, password, studentNumber); // 判断是否存在该用户的方法select
        if (user1 == null) {
            mapper.add(user);
        } else {
            resp.sendRedirect("redirect:/pages/notfound.jsp");
        }

//        this.Fuck(String.valueOf(classGrade));
        int aValue = 0;
        aValue = mapper.setStatusla(classGrade); // 探索该班级内有多少人
//        System.out.println("classGrade:"+classGrade);
//        System.out.println("发现了aValue:"+aValue);
        if (aValue == 1) { // 代表这小子是这个班上第一个注册的 需要设置status为1 （做班级班长）
            mapper.getStatus(classGrade, studentNumber);
            flag1 = 1;
        } else {
            // 代表这小子不是第一个注册的 那边不用管了直接就是默认值了
//            System.out.println("wakawaka");
            flag1 = 1;
        }

        // 在向数据库中加入数据之后就可以直接跳转到 jrbjt.html了


        /*6.提交事务并释放资源*/


        User user2 = mapper.select(name, password, studentNumber); // 判断是否存在该用户的方法select

        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        if (flag1 == 1) {
            if (user2 != null) {
//                System.out.println("数据库中有该小子");
                // 那就直接跳转到首页
                session.setAttribute("user", user);
                String contextPath = req.getContextPath();
                resp.sendRedirect(contextPath+"/pages/jrbjt.html"); // 前往这个页面
//                resp.sendRedirect("redirect:/pages/jrbjt.html");
            } else {
                System.out.println("能进到这说明啥，这根本就不能注册了呀~");
            }
        }





    }

    // 这个函数暂且不去使用
//    private void Fuck(String classGrade) throws IOException {
//        /* 1.加载mybatis的核心部件  去官网copy*/
//        String resource = "mybatis-config.xml";  // 就在resources根目录下
//        InputStream inputStream = Resources.getResourceAsStream(resource);
//        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
//
//        /*2.获取SqlSession对象, 用它执行sql*/
//        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务
//
//        /*3.获取mapper接口的代理对象*/
//        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
//        // 一级验证身份
//        /*
//         * 如果在该生的班级上数据库内还没有存储有关同班级数据 身份就为班长 status:1
//         * 如果有了 才不需要管 是默认值为0：普通学生
//         * */
//        int aValue = mapper.setStatus(classGrade); // 探索该班级内有多少人
//        System.out.println("发现了aValue:"+aValue);
//        if (aValue == -1) {
//            // 代表这小子是这个班上第一个注册的 需要设置status
//            mapper.getStatus(String.valueOf(classGrade);
//            flag1 = 1;
//        } else {
//            // 代表这小子不是第一个注册的 那边不用管了直接就是默认值了
////            System.out.println("wakawaka");
//            flag1 = 1;
//        }
//
//        /*6.提交事务并释放资源*/
//        sqlSession.commit();  // 提交
//        sqlSession.close();  // 释放
//    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * @author wangjie
 * 服务于管理员需要发起含有自己编写的内容的网站的添加
 */
@WebServlet(urlPatterns = "/addnews2")
public class AddNew2 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        // 先获取用户输入的内容
        String data = req.getParameter("data"); // 时间
        String content = req.getParameter("content"); // 标题内容
        String truecontent = req.getParameter("truecontent"); // 真实内容

        data = new String(data.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        content = new String(content.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        truecontent = new String(truecontent.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        String url = "./shownews.html"; // 这是默认的前往地址 用户那边的已经被禁止了

        mapper.addnews(url, data, content, truecontent);

//        String contextPath = req.getContextPath();
//        resp.sendRedirect(contextPath+"/pages1/admin_manage.html"); // 前往这个页面

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        resp.sendRedirect("redirect:/pages1/admin_manage.html");
    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.Fast;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;

/**
 * @author 王杰
 * 注册 register.html
 * problem: 问题是正常的cookie（解码问题） session（会话问题）
 */
@WebServlet(urlPatterns = "/addnews")
public class Addnews extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        String url = req.getParameter("url");
        String data = req.getParameter("data"); // 不用惊讶 这里的data的数据在mysql中就是varchar(12)类型
        String content = req.getParameter("content");


        url = new String(url.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        data = new String(data.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        content = new String(content.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);



        resp.setContentType("text/html;charset=utf-8");
        PrintWriter writer = resp.getWriter();

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        Fast fast = null;
        try{
            fast = new Fast();
            fast.setUrl(url);
            fast.setData(data);
            fast.setContent(content);
        } catch (Exception e) {
            e.printStackTrace();
        }

        mapper.add1(fast);

//        String contextPath = req.getContextPath();

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

//        resp.sendRedirect(contextPath+"/pages1/admin_manage.html"); // 前往这个页面
        resp.sendRedirect("redirect:/pages1/admin_manage.html");
    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.Fast;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;

/**
 * @author 王杰
 * 注册 register.html 发起系统通知
 */
@WebServlet(urlPatterns = "/addnews1")
public class Addnews1 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        String content = req.getParameter("content");

        content = new String(content.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);

        resp.setContentType("text/html;charset=utf-8");
        PrintWriter writer = resp.getWriter();

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        mapper.add2(content);  // 向系统表中放入数据

        String contextPath = req.getContextPath();
//        resp.sendRedirect(contextPath+"/pages1/admin_manage.html"); // 前往这个页面

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        resp.sendRedirect("redirect:/pages1/admin_manage.html");
    }
}
package com.halibaduo.web;

import com.alibaba.fastjson.JSON;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.halibaduo.Class.GetNewNew;
import org.apache.commons.io.IOUtils;


import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

/**
 * @author 王杰
 * 接受进入班级体的回复按键发送来的锁定信息
 */
@WebServlet(urlPatterns = "/ajaxServlet")
public class AjaxServlet extends HttpServlet {
    public static String poster;
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String jsonString = IOUtils.toString(req.getInputStream(), StandardCharsets.UTF_8);

        ObjectMapper mapper = new ObjectMapper();
//        Map<String, Object> data = mapper.readValue(jsonString, new TypeReference<Map<String, Object>>(){});
        String studentnumber = String.valueOf(mapper.readValue(jsonString, int.class));
//        String studentnumber = (String) data.get("brandId");
        studentnumber = "3200" + studentnumber; // 恢复原装 我在html页面截断了 （int超出了） 所以该学校也必须要求用户的学号是320开头
//        System.out.println("studentnumber:" + studentnumber); // 到这里终于 然后将这个数据定位全局变量 每次点击回复都会刷新

        // 更新 or 设置 全局变量 poster
        poster = studentnumber;

        // 发现似乎不会跳到GetNewNew哪里去 好像就到这就结束了 人工跳转运行试一试
        GetNewNew new1 = new GetNewNew();
        new1.start(req,resp);

    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;

/**
 * @author wangjie
 */
@WebServlet(urlPatterns = "/change")
public class Change extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String studentnumber = req.getParameter("studentnumber");
//        System.out.println("studentnumber:"+studentnumber);

        // 将这个人的班级上其余所有status=1的人设置为0 而他这个学号的人status=1为班长
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");
        String studentnumber1 = user.getStudentnumber();
        String statuso = mapper.getStatuso(studentnumber1); // status为1是班长 0就是默认的班级不同成员

        resp.setContentType("text/html;charset=utf-8");
        PrintWriter writer = resp.getWriter();

        // 这里需要检查的原因是谁都可以进入到更换班长页面，但是只有班长才可以更换班长
        if (Integer.valueOf(statuso) == 1) { // 暂时身份才是班长 才有可能需要去转让班长身份
            // 1.将这个人的班级得到先
            int bValue = mapper.getClasso(studentnumber);
            // 2.将改变的所有status=1的改成status=0
            mapper.setStatus0(bValue);
            // 3.将这个学号的同学status弄为1
            mapper.setStatus1(studentnumber);


            /*6.提交事务并释放资源*/
            sqlSession.commit();  // 提交
            sqlSession.close();  // 释放
            // 提示
//            writer.write("<h1>信息更新完毕</h1>");
            resp.sendRedirect("redirect:/pages/changeStatus.html");
        } else {

            /*6.提交事务并释放资源*/
            sqlSession.commit();  // 提交
            sqlSession.close();  // 释放

            writer.write("<h2>不好意思，您的身份暂且不是班长，所以您还不需要转让身份</h2>");
            writer.write("<h2>Sorry, your identity is not the monitor, so you do not need to transfer the identity</h2>");
            writer.write("<a href=\"./pages/jrbjt.html\">返回</a>");
        }




    }
}
package com.halibaduo.web;

import com.halibaduo.util.CheckCodeUtil;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import java.io.IOException;
import java.net.URLEncoder;

/**
 * @author 王杰
 * 对验证码登录进行实现 还有jsp乱码问题
 */
@WebServlet(urlPatterns = "/checkCodeServlet")

public class CheckCodeServlet extends HttpServlet {
    public static String yanzhenma = "\0";
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        ServletOutputStream outputStream = resp.getOutputStream();
        // 参数分别对应宽度、高度、输出流、诗句长度 返回值：验证码数据
        String checkCode = CheckCodeUtil.outputVerifyImage(100, 50, outputStream, 4);
//        System.out.println("checkCode:"+checkCode);  // 获取成功

        yanzhenma = checkCode; // 使用全局变量去存储 暂且发现无法使用正常的cookie和session去使用 会有绘画问题

    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * @author 王杰
 * 管理员 删除 用户
 */
@WebServlet(urlPatterns = "/delete")
public class Delete extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
//        System.out.println("password:"+password);
//        System.out.println("name:"+name);
//        System.out.println("studentnumber:"+studentnumber);

        //  将必要的三大数据储存为session，以备后续使用
        //  1. 真实姓名:name  2.学号:studentnumber  3.密码:password
//        HttpSession session = req.getSession();
//        User user = (User) session.getAttribute("user");
//        String studentNumber = user.getStudentnumber();
        String studentNumber = req.getParameter("studentnumber");
        System.out.println(studentNumber);


        /* 数据获取成功 显示正常 */

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        mapper.delete(studentNumber); // 判断是否存在该用户的方法select

        // 那就直接跳转到首页
        String contextPath = req.getContextPath();

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放
//        resp.sendRedirect(contextPath+"/pages1/admin_manage.html"); // 前往这个页面
        resp.sendRedirect("redirect:/pages1/admin_manage.html");
    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author 王杰
 * 注册 register.html
 */
@WebServlet(urlPatterns = "/delete1")
public class Delete1 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {

        String formation = req.getParameter("formation");


//        System.out.println("password:"+password);
//        System.out.println("name:"+name);
//        System.out.println("studentnumber:"+studentnumber);

        //  将必要的三大数据储存为session，以备后续使用
        //  1. 真实姓名:name  2.学号:studentnumber  3.密码:password
        HttpSession session = req.getSession();
        session.setAttribute("formation", formation);


        /* 数据获取成功 显示正常 */

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        int formation1 = Integer.parseInt(formation);
        mapper.delete1(formation1); // 判断是否存在该用户的方法select



        // 那就直接跳转到首页
        String contextPath = req.getContextPath();
        resp.sendRedirect(contextPath+"/pages1/admin_manage.html"); // 前往这个页面


        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

    }
    public void go(HttpServletRequest req, HttpServletResponse resp, Integer status) throws ServletException, IOException{
        if (status == 1) { // 这里很莫名其妙尽然需要再加上AlumniNetwork
            resp.setHeader("refresh", "0;URL=../AlumniNetwork/pages/jrbjt.html");  // 完成后0秒内跳转页面
        }
        if (status == 2) { // 这里很莫名其妙尽然需要再加上AlumniNetwork
            resp.setHeader("refresh", "0;URL=../pages/test.html");  // 完成后0秒内跳转页面
        }
        if (status == 3) { // 服务于乱输出想直接进系统的用户
            resp.setHeader("refresh", "5;URL=../pages/login.html");  // 完成后0秒内跳转页面
        }
    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;

/**
 * @author 王杰
 * 注册 register.html
 * problem: 问题是正常的cookie（解码问题） session（会话问题）
 */
@WebServlet(urlPatterns = "/deleteAllNotice")
public class deleteAllNotice extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        mapper.deleteAllNotice();

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        resp.sendRedirect("redirect:/page1/admin_manage.html");

    }

    // 这个函数暂且不去使用
//    private void Fuck(String classGrade) throws IOException {
//        /* 1.加载mybatis的核心部件  去官网copy*/
//        String resource = "mybatis-config.xml";  // 就在resources根目录下
//        InputStream inputStream = Resources.getResourceAsStream(resource);
//        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
//
//        /*2.获取SqlSession对象, 用它执行sql*/
//        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务
//
//        /*3.获取mapper接口的代理对象*/
//        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
//        // 一级验证身份
//        /*
//         * 如果在该生的班级上数据库内还没有存储有关同班级数据 身份就为班长 status:1
//         * 如果有了 才不需要管 是默认值为0：普通学生
//         * */
//        int aValue = mapper.setStatus(classGrade); // 探索该班级内有多少人
//        System.out.println("发现了aValue:"+aValue);
//        if (aValue == -1) {
//            // 代表这小子是这个班上第一个注册的 需要设置status
//            mapper.getStatus(String.valueOf(classGrade);
//            flag1 = 1;
//        } else {
//            // 代表这小子不是第一个注册的 那边不用管了直接就是默认值了
////            System.out.println("wakawaka");
//            flag1 = 1;
//        }
//
//        /*6.提交事务并释放资源*/
//        sqlSession.commit();  // 提交
//        sqlSession.close();  // 释放
//    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * @author halibaduoxiansheng@gmail.com wangjie 320040300239
 * 作用就是接受捐款模块的数据提交
 */
@WebServlet(urlPatterns = "/donate")
public class Donate extends HttpServlet {
    public static int donateValue = 0;
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String leibie = req.getParameter("leibie"); // 捐款项目的类型 现在一共就两个 1、 2 强制选择项
        String money = req.getParameter("money"); // 捐款金额
        String name = req.getParameter("name"); // 捐款人name
        String telephone = req.getParameter("telephone"); // 捐款人电话号码
        String gender = req.getParameter("gender"); // 性别 1:男 2:女 3:未知 强制选择项
        String words = req.getParameter("words"); // 捐款祝语
        String addr = req.getParameter("addr"); // 捐款人所住地址
        String fp = req.getParameter("fp"); // 0:不要发票 1:要发票  强制选择项
        String guanxi = req.getParameter("guanxi"); //1:校友 2:教职工 3:在校学生 4:友人

        words = new String(words.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        name = new String(name.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        addr = new String(addr.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);

        // 将默认可以不提交的内容给上默认值
        if (money.equals("")) {
            money = "未知";
        }else{
            money = money + "元";
        }

        if (name.equals("")) {
            name = "未知";
        }

        if(telephone.equals("")) {
            telephone = "未知";
        }

        if (words.equals("")) {
            words = "未知";
        }

        if (addr.equals("")) {
            addr = "未知";
        }

        if (guanxi.equals("")) {
            guanxi = "未知";
        }else if (guanxi.equals("1")) {
            guanxi = "校友";
        }else if (guanxi.equals("2")) {
            guanxi = "教职工";
        }else if (guanxi.equals("3")) {
            guanxi = "在校学生";
        }else if (guanxi.equals("4")) {
            guanxi = "友人";
        }

        // 处理必填项
        if (leibie.equals("1")) {
            leibie = "周年校庆——校友年度捐赠活动";
        }else if(leibie.equals("2")) {
            leibie = "校园美化绿化基金";
        }

        if (gender.equals("1")) {
            gender = "男";
        } else if (gender.equals("2")) {
            gender = "女";
        } else if (gender.equals("3")) {
            gender = "未知";
        }

        if (fp.equals("0")) {
            fp = "不要发票";
        } else if (fp.equals("1")) {
            fp = "要发票";
        }

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        mapper.adddonate(leibie, money, name, telephone, gender, words, addr, fp, guanxi);
        donateValue = 1;

        /* 提交事务并释放资源 */
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        String contextPath = req.getContextPath();
        resp.sendRedirect(contextPath + "/pages/donate.html"); // 前往这个页面

    }
}
package com.halibaduo.web;

import com.alibaba.fastjson.JSONObject;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.Admin;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDateTime;

/**
 * @author 王杰
 * 服务于管理员管理界面的最上方的数据
 */
@WebServlet(urlPatterns = "/gettwoinfo/*")
public class Gettwoinfo extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        HttpSession session = req.getSession();

        Admin admin = (Admin) session.getAttribute("user1");
        String username = admin.getUsername();
        String password = admin.getPassword();

        LocalDateTime now = LocalDateTime.now();
        String time = String.valueOf(now);

        // 获取登录人的ip地址
        String ipAddress = req.getRemoteAddr();

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("username", username);
        jsonObject.put("password", password); // 登录时间


        String jsonString = jsonObject.toString();

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        mapper.setAdminInfo(username, time, ipAddress);

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");

    }
    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

//         使session消失的代码
        HttpSession session = req.getSession();
        session.invalidate();
    }
}
package com.halibaduo.web;

import com.alibaba.fastjson.JSON;
import com.halibaduo.pojo.Brand;
import com.halibaduo.pojo.PageBean;
import com.halibaduo.server.BrandService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.List;

/**
 * @author wangjie
 */
@WebServlet(urlPatterns = "/listServlet/*")
public class ListServlet extends HttpServlet {
    private BrandService brandService = new BrandService();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        List<Brand> brands = brandService.selectAll();

        // 2. 将集合转换为JSON数据 序列化
        String jsonString = JSON.toJSONString(brands);
//        System.out.println("jsonString:"+jsonString);

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
//        resp.getWriter().write(jsonString);  // 这一行代码暂且不适用
        this.selectByPage1(req, resp);  // 没有这个怕不是不能成功了

    }

    public void selectByPage1(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException{
        int timela = Integer.parseInt(req.getParameter("timela"));
        String content = req.getParameter("content"); // 关键词模糊查询
        String firsttime = req.getParameter("firsttime");
        String lasttime = req.getParameter("lasttime");

        if (content != null) {
            content = new String(content.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        }
        if (firsttime != null && !firsttime.equals("")) {
            firsttime = new String(firsttime.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        }
        if (lasttime != null && !lasttime.equals("")) {
            lasttime = new String(lasttime.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        }

        // 验证输出一下
//        System.out.println("timela:"+timela);
//        System.out.println("content:"+content);
//        System.out.println("firsttime:"+firsttime); // 类似数据 2023-09 or 2018-12 截取-之间的的当年，-之后的当月
//        System.out.println("lasttime:"+lasttime);


        String firsttime_year="", firsttime_day="", lasttime_year="", lasttime_day="";
        if(firsttime != null && !firsttime.equals("")) {
            String[] strings = firsttime.split("-");
            String year = strings[0];
            String day = strings[1]; // 再需要排序单月的前面的0
            if (day.length() == 2 && day.charAt(0) == '0') {
                day = day.replace("0", "");
            }
            firsttime_year = year;
            firsttime_day = day;
        }
        if(lasttime != null && !lasttime.equals("")) {
            String[] strings = lasttime.split("-");
            String year = strings[0];
            String day = strings[1]; // 再需要排序单月的前面的0
            if (day.length() == 2 && day.charAt(0) == '0') {
                day = day.replace("0", "");
            }
            lasttime_year = year;
            lasttime_day = day;
        }

        // 注意下面的资源要能获取的话还得是用户真填入了
//        System.out.println("firsttime_year:"+firsttime_year);
//        System.out.println("firsttime_day:"+firsttime_day);
//        System.out.println("lasttime_year:"+lasttime_year);
//        System.out.println("lasttime_day:"+lasttime_day);

        // 先设置年限的选择timela值 1：全部 2.近一个月 3.近半年 4.近一年

        // 要知道这个函数接受的数据是随机的，不知道哪个数据是存在的 又有可能都不存在
        // 但请知道timela这个是一定会有一个值获取的
        if (firsttime != null || lasttime != null) {  // 开始的那个优先级最高
            if (content == null || content.equals("")) {
//                System.out.println("content不填的时候我就会出现");
                PageBean<Brand> pageBean = brandService.SelectByPage1(timela);

                // 2. 将集合转换为JSON数据 序列化
                String jsonString = JSON.toJSONString(pageBean);

                // 3.响应数据
                resp.setContentType("text/json;charset=utf-8");
                resp.getWriter().write(jsonString);
//        System.out.println("输出一点东西");
            }  else {  // 代表有加上另外的关键词条件
//                System.out.println("证明一下我的确来到过这里面了！");
                PageBean<Brand> pageBean = brandService.SelectByPage1(timela, content);

                // 2. 将集合转换为JSON数据 序列化
                String jsonString = JSON.toJSONString(pageBean);

                // 3.响应数据
                resp.setContentType("text/json;charset=utf-8");
                resp.getWriter().write(jsonString);
                // 现在的问题就是这一步确实起到了作用，但此时的页面已经变化了


//        System.out.println("输出一点东西");
            }
        }
    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;

/**
 * @author 王杰
 * 注册 login.html
 */
@WebServlet(urlPatterns = "/loginServlet")
public class LoginServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        String password = req.getParameter("password");
//        String name = req.getParameter("name");
        String telephone = req.getParameter("telephone");

        password = new String(password.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
//        name = new String(name.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);

//        System.out.println("password:"+password);
//        System.out.println("name:"+name);
//        System.out.println("studentnumber:"+studentnumber);

        //  将必要的三大数据储存为session，以备后续使用
        //  1. 真实姓名:name  2.学号:studentnumber  3.密码:password


        /* 数据获取成功 显示正常 */

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        String studentNumber = mapper.getStudentnumber(telephone);

        String name = mapper.getName(studentNumber);


        HttpSession session = req.getSession();
        session.setAttribute("name", name);
        session.setAttribute("studentnumber", studentNumber);
        session.setAttribute("password", password);

        User user = mapper.select(name, password, studentNumber); // 判断是否存在该用户的方法select

        if (user != null) {
            /*System.out.println("数据库中有该小子");*/
            // 那就直接跳转到首页
            session.setAttribute("user", user);
            String contextPath = req.getContextPath();
            resp.sendRedirect(contextPath+"/pages/jrbjt.html"); // 前往这个页面
        } else {
//            String loginMsg = "用户名或密码错误";
//            String jsonResponse = "{\"login_msg\": \"" + loginMsg + "\"}";
//            resp.setContentType("application/json");
//            resp.setCharacterEncoding("UTF-8");
//            resp.getWriter().write(jsonResponse);
            String contextPath = req.getContextPath();
            resp.sendRedirect(contextPath+"/pages/error.html"); // 前往这个页面
        }

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放
    }
    public void go(HttpServletRequest req, HttpServletResponse resp, Integer status) throws ServletException, IOException{
        if (status == 1) { // 这里很莫名其妙尽然需要再加上AlumniNetwork
            resp.setHeader("refresh", "0;URL=../AlumniNetwork/pages/jrbjt.html");  // 完成后0秒内跳转页面
        }
        if (status == 2) { // 这里很莫名其妙尽然需要再加上AlumniNetwork
            resp.setHeader("refresh", "0;URL=../pages/test.html");  // 完成后0秒内跳转页面
        }
        if (status == 3) { // 服务于乱输出想直接进系统的用户
            resp.setHeader("refresh", "5;URL=../pages/login.html");  // 完成后0秒内跳转页面
        }
        if (status == 4) { // 服务于乱输出想直接进系统的用户
            resp.setHeader("refresh", "0;URL=../pages/test1.html");  // 完成后0秒内跳转页面
        }
    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.Admin;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;

/**
 * @author 王杰
 * 用户管理员登录
 */
@WebServlet(urlPatterns = "/loginServlet1")
public class LoginServlet1 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        String username = req.getParameter("username");
        String password = req.getParameter("password");

        password = new String(password.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        username = new String(username.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);


        HttpSession session = req.getSession();
        Admin admin = new Admin();


//        session.setAttribute("username", username);
//        session.setAttribute("password", password);
//        session.setAttribute("ipAddress", ipAddress);

        /* 数据获取成功 显示正常 */

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        Admin user1 = mapper.select1(username, password); // 判断是否存在该用户的方法select

        if (user1 != null) {
//            System.out.println("数据库中有该小子");
            // 那就直接跳转到首页
            session.setAttribute("user1", user1);
            String contextPath = req.getContextPath();

            /*6.提交事务并释放资源*/
            sqlSession.commit();  // 提交
            sqlSession.close();  // 释放

            resp.sendRedirect(contextPath+"/pages1/admin_manage.html"); // 前往这个页面
        } else {
//            System.out.println("谁呀？还让不让人消停了？");
            /*6.提交事务并释放资源*/
            sqlSession.commit();  // 提交
            sqlSession.close();  // 释放

            resp.setContentType("text/html;charset=utf-8");
            PrintWriter writer = resp.getWriter();
            writer.write("<h1>该管理员账号不存在<h1>");
        }



    }
    public void go(HttpServletRequest req, HttpServletResponse resp, Integer status) throws ServletException, IOException{
        if (status == 1) { // 这里很莫名其妙尽然需要再加上AlumniNetwork
            resp.setHeader("refresh", "0;URL=../AlumniNetwork/pages/jrbjt.html");  // 完成后0秒内跳转页面
        }
        if (status == 2) { // 这里很莫名其妙尽然需要再加上AlumniNetwork
            resp.setHeader("refresh", "0;URL=../pages/test.html");  // 完成后0秒内跳转页面
        }
        if (status == 3) { // 服务于乱输出想直接进系统的用户
            resp.setHeader("refresh", "5;URL=../pages/login.html");  // 完成后0秒内跳转页面
        }
    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.util.List;

/**
 * @author 86199
 * 服务于个人中心的头像部件
 */
@WebServlet(urlPatterns = "/onepeople11")
public class Onepeople extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        System.out.println("代表来过这垃圾");
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        // 创建新的文件夹用于储放图片  文件夹名称images 位置就是在项目目录的src下面
        System.out.println(System.getProperty("user.dir"));
        File imagesFolder = new File("./src/images");

        // 尝试创建文件夹。
        if (!imagesFolder.exists()) {
            try {
                imagesFolder.mkdir();
//                System.out.println("创建成功！");
            } catch (Exception e) {
//                System.out.println("创建失败！");
            }
        }

        if (ServletFileUpload.isMultipartContent(req)) {
            //创建DiskFileItemFactory 工厂
            DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();
            //创建文件上传解析器
            ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory);
            servletFileUpload.setHeaderEncoding("UTF-8");
            try {
                try{
                    List<FileItem> list = servletFileUpload.parseRequest(req);
                    for (FileItem item : list) {
                        if (item.isFormField()) { //判断上传是否为文件
//                            System.out.println(item.getFieldName());  // 输出html对应的那个id
//                            System.out.println(item.getString("UTF-8")); // 输出文件的原名称
                            // 这里开始将文件储存到数据库中 当然 只需要储存这个文件的位置、名称即可
                            /*
                             * fileLocation :文件位置   fileName : 文件名称 id自增
                             * */
                            resp.setContentType("text/html;charset=utf-8");
                            PrintWriter writer = resp.getWriter();

                            writer.write("<h1>文件太大了，请换一张小一些的，谢谢~</h1>");
                            // 其实当文件过大时也到不了这里 哈哈 有空记得的话再回来改
                        } else {
                            HttpSession session = ((HttpServletRequest) req).getSession();
                            User user = (User) session.getAttribute("user");
                            String studentnumber = user.getStudentnumber(); // 得到该提交人的学号了

//                            System.out.println(item.getName());  // 输出文件的名称
                            //将文件写到本地磁盘  暂时并没有觉得有什么大不妥 但是我还是决定告诉一下用户图片位置
                            item.write(new File("./src/images/" + item.getName()));  // 用户上传的图片文件会储存在……
                            req.setAttribute("message", "upload successful");


                            String fileName = item.getName();

                            // 创建一个FileInputStream对象，将其与要读取的图像文件关联。
                            FileInputStream fis = new FileInputStream("./src/images/"+fileName);

                            // 创建一个ByteArrayOutputStream对象。
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();

                            // 使用read()方法从FileInputStream对象读取数据，并将其写入ByteArrayOutputStream对象。
                            byte[] buffer = new byte[1024];
                            int bytesRead;
                            while ((bytesRead = fis.read(buffer)) != -1) {
                                baos.write(buffer, 0, bytesRead);
                            }

                            // 使用toByteArray()方法从ByteArrayOutputStream对象获取二进制数据。
                            byte[] imageData = baos.toByteArray();
//                            System.out.println("二进制数据:"+imageData);

                            // 关闭FileInputStream和ByteArrayOutputStream对象。
                            fis.close();
                            baos.close();

                            mapper.addfilepeople(studentnumber, imageData);  // 根据学号去定位是谁在设置头像

                            /* 提交事务并释放资源 */
                            sqlSession.commit();  // 提交
                            sqlSession.close();  // 释放

                            /* 用完即删 -- 图片 */
                            File imageFile = new File("./src/images/"+fileName);
                            // Delete the image.
                            imageFile.delete();


                            String contextPath = req.getContextPath();
                            resp.sendRedirect(contextPath + "/pages/People.html"); // 前往这个页面
                        }
                    }
                } catch(Exception e){
                    e.printStackTrace();
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;

/**
 * @author wangjie
 * 服务于进入班级的个人中心
 */
@WebServlet("/people")
public class People extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        // 得到填入的信息
        String password = req.getParameter("password");
        String username = req.getParameter("username");
        String studentnumber = req.getParameter("studentnumber");


        //还需要他本人的一个信息进入确认 比如原本的学号
        HttpSession session = req.getSession();
//        String studentnumber1 = (String) session.getAttribute("studentnumber");
        User user1 = (User) session.getAttribute("user");
        String studentnumber1 = user1.getStudentnumber();

        username = new String(username.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);

//        System.out.println("password:"+password);
//        System.out.println("username:"+username);
//        System.out.println("studentnumber:"+studentnumber);

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        resp.setContentType("text/html;charset=utf-8");
        PrintWriter writer = resp.getWriter();

        int flag2 = 1;
        // 将8种可能性全部考虑在内 （原因：用户可以修改三种东西 ）
        User user = (User) session.getAttribute("user");
        if(password.equals("") && username.equals("") && studentnumber.equals("")){ // 如果没有填写密码
            writer.write("<h1>请填写数据后再提交更改</h1>");
            flag2 = 0;
        }
        else if(password.equals("") && username.equals("") && !studentnumber.equals("")){
            // 改 学号
            mapper.changestudentnumber(studentnumber, studentnumber1);

            user.setStudentnumber(studentnumber);
            session.setAttribute("user", user);
            flag2 = 0;
        }
        else if(password.equals("") && !username.equals("") && studentnumber.equals("")){
            // 改 用户名
            mapper.changeusername(username, studentnumber1);
            user.setUsername(username);
            session.setAttribute("user", user);
            flag2 = 0;
        }
        else if(password.equals("") && !username.equals("") && !studentnumber.equals("")){
            // 改 用户名和学号
            mapper.change23(username, studentnumber, studentnumber1);
            user.setUsername(username);
            user.setStudentnumber(studentnumber);
            session.setAttribute("user", user);
            flag2 = 0;
        }
        else if(!password.equals("") && username.equals("") && studentnumber.equals("")){
            // 改 密码
            mapper.changepassword(password, studentnumber1);
            user.setPassword(password);
            session.setAttribute("user", user);
            flag2 = 0;
        }
        else if(!password.equals("") && username.equals("") && !studentnumber.equals("")){
            // 改 密码和学号
            mapper.change13(password, studentnumber, studentnumber1);
            user.setPassword(password);
            user.setStudentnumber(studentnumber);
            session.setAttribute("user", user);
            flag2 = 0;
        }
        else if(!password.equals("") && !username.equals("") && studentnumber.equals("")){
            // 改 密码和用户名
            mapper.change12(password, username, studentnumber1);
            user.setPassword(password);
            user.setUsername(username);
            session.setAttribute("user", user);
            flag2 = 0;
        }
        else if(!password.equals("") && !username.equals("") && !studentnumber.equals("")){
            // 改 密码，用户名和学号
            mapper.change123(password, username, studentnumber, studentnumber1);
            user.setUsername(username);
            user.setPassword(password);
            user.setStudentnumber(studentnumber);
            session.setAttribute("user", user);
            flag2 = 0;
        }
        if (flag2 == 0){
            //writer.write("修改完成~");
            //提交释放
            sqlSession.commit();
            sqlSession.close();

            resp.sendRedirect("redirect:/pages/People.html");
        }

    }
}
package com.halibaduo.web;

import com.alibaba.fastjson.JSONObject;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;

/**
 * @author wangjie
 * 服务于进入班级的个人中心
 */
@WebServlet("/people0/*")
public class People0 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        // 得到填入的信息
        String myfile = req.getParameter("myfile");

        //还需要他本人的一个信息进入确认 比如原本的学号
        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");
        String studentnumber1 = user.getStudentnumber();


        if(myfile != null && !myfile.equals("")){
            myfile = new String(myfile.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        }

//        System.out.println("myfile:"+myfile);

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        String name = mapper.getName(studentnumber1);

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("name", name);
        jsonObject.put("studentnumber", studentnumber1);

        String jsonString = jsonObject.toString();

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);

    }
}
package com.halibaduo.web;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

/**
 * @author 86199
 * 服务于每个页面上方的搜索按钮 然后更具提供内容进行模糊查询
 */
@WebServlet(urlPatterns = "/search")
public class SearchServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        // 获取用户输入的内容 将来将根据用户输入的内容进行模糊查询
        String text = req.getParameter("text");
        text = new String(text.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
//        System.out.println("证明的确收到了用户输入的内容:"+text); // 收到的信息无误

        HttpSession session = ((HttpServletRequest) req).getSession();
        session.setAttribute("text", text); // 将该文件储存到session中

        // 接下来跳转到固定的页面 当然也需要将这个数据也传递过去给那个页面使用
        String contextPath = req.getContextPath();
        resp.sendRedirect(contextPath+"/pages/search.html"); // 前往这个页面

    }
}
package com.halibaduo.web;

import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * @author wangjie
 * 服务于系统通告
 */
@WebServlet(urlPatterns = "/systemNotice")
public class SystemNotice extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        String theNewContent = "";
        // 先查清楚有没有系统通知
        int count = mapper.getSystemNoticeNum();
        if (count != 0) {
            theNewContent = mapper.getSystemContent();
        } else {
            theNewContent = "暂无系统通知";
        }

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放
//        System.out.println("the1:"+theNewContent);
//        theNewContent = new String(theNewContent.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
//        System.out.println("the2:"+theNewContent);
        resp.setCharacterEncoding("UTF-8"); // 替换为您使用的字符编码
        resp.getWriter().write(theNewContent);
    }
}
package com.halibaduo.web.filter;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import com.halibaduo.web.AddinfoServlet;
import com.halibaduo.web.LoginServlet;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.URLDecoder;

/**
 * @author 王杰
 * 作用是处理过滤 暂且只用来阻拦  ”进入班集体“ 模块
 */
// 暂且阻拦所有进入的页面
//@WebFilter(urlPatterns = {"/pages/student_index.html", "/pages/teacher_index.html", "/pages/administrator_index.html"})

// 别漏了/没写。是会检测的
@WebFilter(urlPatterns = {"/pages/jrbjt.html","/pages/addseries.html","/pages/addseries1.html","/pages/bjxc.html",
        "/pages/bjyy.html","/pages/bjtz.html","/pages/People.html"})
public class FilterDemo implements Filter {
    // 注意一点 要不是浏览器有缓存 将过滤路径调为/*的话将会将所有css文件和js文件，图片等文件一并拦截

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {

    }

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        HttpSession session = ((HttpServletRequest) servletRequest).getSession();
        Object user = session.getAttribute("user");
        if (user != null){

            // 如果用户真实存在 就将该用户此时最新的登录ip地址储存下来
            // 获取登录人的ip地址 并储存至数据库
            HttpServletRequest req = (HttpServletRequest) servletRequest;
            String ipAddress = req.getRemoteAddr();

            /* 1.加载mybatis的核心部件  去官网copy*/
            String resource = "mybatis-config.xml";  // 就在resources根目录下
            InputStream inputStream = Resources.getResourceAsStream(resource);
            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

            /*2.获取SqlSession对象, 用它执行sql*/
            SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

            /*3.获取mapper接口的代理对象*/
            UserMapper mapper = sqlSession.getMapper(UserMapper.class);

            User user1 = (User) user;
            String studentnumber = user1.getStudentnumber();
            mapper.setip(ipAddress, studentnumber);

            /*6.提交事务并释放资源*/
            sqlSession.commit();  // 提交
            sqlSession.close();  // 释放

//            System.out.println("先不管放行没，先看数据");
            filterChain.doFilter(servletRequest, servletResponse);
        }
        else{
            LoginServlet loginServlet = new LoginServlet();
            loginServlet.go((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse, 2);
        }
    }

    @Override
    public void destroy() {

    }
}
package com.halibaduo.web.filter;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.Admin;
import com.halibaduo.pojo.User;
import com.halibaduo.web.LoginServlet;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author 王杰
 * 作用是处理过滤 暂且只用来阻拦  ”管理员管理“ 模块 admin_manage
 */
// 暂且阻拦所有进入的页面
//@WebFilter(urlPatterns = {"/pages/student_index.html", "/pages/teacher_index.html", "/pages/administrator_index.html"})

// 别漏了/没写。是会检测的
@WebFilter(urlPatterns = "/pages1/admin_manage.html")
public class FilterDemo1 implements Filter {
    // 注意一点 要不是浏览器有缓存 将过滤路径调为/*的话将会将所有css文件和js文件，图片等文件一并拦截

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {

    }

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        HttpSession session = ((HttpServletRequest) servletRequest).getSession();
        Admin user11 = (Admin) session.getAttribute("user1");
        if (user11 != null){ // 要想到下面那个else if要求是
            String password = user11.getPassword();
//            System.out.println("password:"+password);
            filterChain.doFilter(servletRequest, servletResponse);
        }
        else{
            LoginServlet loginServlet = new LoginServlet();
            loginServlet.go((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse, 4);
        }
    }

    @Override
    public void destroy() {

    }
}
package com.halibaduo.websocket;

import com.halibaduo.pojo.User;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;

/**
 * @author halibaduo
 * Description:
 */
@WebServlet("/getUsernameForJrbjt")
public class GetUsernameForJrbjt extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");
        String name = user.getName();

        // 格式
        resp.setContentType("text/html;charset=utf-8");
        resp.setCharacterEncoding("UTF-8"); // 替换为您使用的字符编码
        resp.getWriter().write(name);
    }
}
package com.halibaduo.websocket;

import com.alibaba.fastjson.JSONObject;
import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

/**
 * @author halibaduo
 * Description:
 */
@WebServlet("/ws/*")
public class WebSocketUtil extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setHeader("Access-Control-Allow-Origin", "*"); // 允许跨域请求
        req.setCharacterEncoding("UTF-8");

        String studentNumber = req.getParameter("studentNumber"); // 得到学号了



        // 2.调用mybatis完成
        SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        String name = mapper.getName(studentNumber);

        System.out.println("得到学号:"+studentNumber+",得到姓名:"+name);

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("name", name);
        String json = jsonObject.toString();
        resp.setContentType("application/json");
        resp.setCharacterEncoding("UTF-8");
        PrintWriter writer = resp.getWriter();
        writer.write(json);
        writer.close();
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setHeader("Access-Control-Allow-Origin", "*");
        this.doGet(req, resp);
    }
}
package com.halibaduo.Work;

import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author wangjie
 * 用户管理员对讯息的删除
 */
@WebServlet(urlPatterns = "/deleteInfo")
public class DeleteInfo extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String id = req.getParameter("id"); // 获取需要删除的图片的id了

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        mapper.delete1(Integer.parseInt(id));

        /* 提交事务并释放资源 */
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        resp.sendRedirect("redirect:/pages1/admin_manage.html");

    }
}
package com.halibaduo.Work;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.*;
import java.sql.Connection;


import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import java.sql.*;
import java.util.Collection;
import java.util.List;

/**
 * @author wangjie
 * 服务于进入班集体 的 班级相册
 * 向数据库中加入图片文件数据
 */
@WebServlet(urlPatterns = "/father")
public class Father extends HttpServlet {
    // 数据的分系列已经完成了 接下来就是将数据上传时的具体细节了
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        // 创建新的文件夹用于储放图片  文件夹名称images 位置就是在项目目录的src下面
//        System.out.println(System.getProperty("user.dir"));
        File imagesFolder = new File("./src/images");

        // 尝试创建文件夹。
        if (!imagesFolder.exists()) {
            try {
                imagesFolder.mkdir();
//                System.out.println("创建成功！");
            } catch (Exception e) {
//                System.out.println("创建失败！");
            }
        }

        if (ServletFileUpload.isMultipartContent(req)) {
            //创建DiskFileItemFactory 工厂
            DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();
            //创建文件上传解析器
            ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory);
            servletFileUpload.setHeaderEncoding("UTF-8");
            try {
                try{
                    List<FileItem> list = servletFileUpload.parseRequest(req);
                    for (FileItem item : list) {
                        if (item.isFormField()) { //判断上传是否为文件
//                            System.out.println(item.getFieldName());  // 输出html对应的那个id
//                            System.out.println(item.getString("UTF-8")); // 输出文件的原名称
                            // 这里开始将文件储存到数据库中 当然 只需要储存这个文件的位置、名称即可
                            /*
                            * fileLocation :文件位置   fileName : 文件名称 id自增
                            * */
                            resp.setContentType("text/html;charset=utf-8");
                            PrintWriter writer = resp.getWriter();

                            writer.write("<h1>文件太大了，请换一张小一些的，谢谢~</h1>");
                            // 其实当文件过大时也到不了这里 哈哈 有空记得的话再回来改
                        } else {
                            HttpSession session = ((HttpServletRequest) req).getSession();
                            User user = (User) session.getAttribute("user");
                            String studentnumber = user.getStudentnumber(); // 得到该提交人的学号了

//                            System.out.println(item.getName());  // 输出文件的名称
                            //将文件写到本地磁盘  暂时并没有觉得有什么大不妥 但是我还是决定告诉一下用户图片位置
                            item.write(new File("./src/images/" + item.getName()));  // 用户上传的图片文件会储存在……
                            req.setAttribute("message", "upload successful");


                            String fileName = item.getName();

                            // 创建一个FileInputStream对象，将其与要读取的图像文件关联。
                            FileInputStream fis = new FileInputStream("./src/images/"+fileName);

                            // 创建一个ByteArrayOutputStream对象。
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();

                            // 使用read()方法从FileInputStream对象读取数据，并将其写入ByteArrayOutputStream对象。
                            byte[] buffer = new byte[1024];
                            int bytesRead;
                            while ((bytesRead = fis.read(buffer)) != -1) {
                                baos.write(buffer, 0, bytesRead);
                            }

                            // 使用toByteArray()方法从ByteArrayOutputStream对象获取二进制数据。
                            byte[] imageData = baos.toByteArray();
//                            System.out.println("二进制数据:"+imageData);

                            // 关闭FileInputStream和ByteArrayOutputStream对象。
                            fis.close();
                            baos.close();

                            String dola = "true";
//                            String series = ForFather.Series; // 将用户第一次提交的给到位
                            //TODO 优化
                            String series = ForFather.getThreadLocalData();

                            mapper.addfile(series, fileName, imageData, studentnumber, dola);
                            mapper.change();  // 将同一series的后面加入的都将其dola列改为false 因为你并设置默认值是true

//                            int classo = mapper.getClasso(studentnumber);
                            mapper.setTrue();

                            mapper.gugu();

                            /* 提交事务并释放资源 */
                            sqlSession.commit();  // 提交
                            sqlSession.close();  // 释放

                            /* 用完即删 -- 图片 */
                            File imageFile = new File("./src/images/"+fileName);
                            // Delete the image.
                            imageFile.delete();


                            String contextPath = req.getContextPath();
                            resp.sendRedirect(contextPath + "/pages/bjxc.html"); // 前往这个页面
//                            resp.sendRedirect("redirect:/pages/bjxc.html");
                        }
                    }
                } catch(Exception e){
                    e.printStackTrace();
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }
}
package com.halibaduo.Work;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

/**
 * @author wangjie
 * 服务于进入班集体 的 班级相册
 * 向数据库中加入图片文件数据
 */
@WebServlet(urlPatterns = "/father1")
public class Father1 extends HttpServlet {
    // 数据的分系列已经完成了 接下来就是将数据上传时的具体细节了
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        String series = req.getParameter("series"); // 获得用户输入的系列名
//        String series = map.get("series");
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        // 创建新的文件夹用于储放图片  文件夹名称images 位置就是在项目目录的src下面
        System.out.println(System.getProperty("user.dir"));
        File imagesFolder = new File("./src/images");

        // 尝试创建文件夹。
        if (!imagesFolder.exists()) {
            try {
                imagesFolder.mkdir();
//                System.out.println("创建成功！");
            } catch (Exception e) {
//                System.out.println("创建失败！");
            }
        }

        if (ServletFileUpload.isMultipartContent(req)) {
            //创建DiskFileItemFactory 工厂
            DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();
            //创建文件上传解析器
            ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory);
            servletFileUpload.setHeaderEncoding("UTF-8");
            try {
                try{
                    List<FileItem> list = servletFileUpload.parseRequest(req);
                    for (FileItem item : list) {
                        if (item.isFormField()) { //判断上传是否为文件
//                            System.out.println(item.getFieldName());  // 输出html对应的那个id
//                            System.out.println(item.getString("UTF-8")); // 输出文件的原名称
                            // 这里开始将文件储存到数据库中 当然 只需要储存这个文件的位置、名称即可
                            /*
                            * fileLocation :文件位置   fileName : 文件名称 id自增
                            * */
                            resp.setContentType("text/html;charset=utf-8");
                            PrintWriter writer = resp.getWriter();

                            writer.write("<h1>文件太大了，请换一张小一些的，谢谢~</h1>");
                            // 其实当文件过大时也到不了这里 哈哈 有空记得的话再回来改
                        } else {
                            HttpSession session = ((HttpServletRequest) req).getSession();
                            User user = (User) session.getAttribute("user");
                            String studentnumber = user.getStudentnumber(); // 得到该提交人的学号了

//                            System.out.println(item.getName());  // 输出文件的名称
                            //将文件写到本地磁盘  暂时并没有觉得有什么大不妥 但是我还是决定告诉一下用户图片位置
                            item.write(new File("./src/images/" + item.getName()));  // 用户上传的图片文件会储存在……
                            req.setAttribute("message", "upload successful");


                            String fileName = item.getName();

                            // 创建一个FileInputStream对象，将其与要读取的图像文件关联。
                            FileInputStream fis = new FileInputStream("./src/images/"+fileName);

                            // 创建一个ByteArrayOutputStream对象。
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();

                            // 使用read()方法从FileInputStream对象读取数据，并将其写入ByteArrayOutputStream对象。
                            byte[] buffer = new byte[1024];
                            int bytesRead;
                            while ((bytesRead = fis.read(buffer)) != -1) {
                                baos.write(buffer, 0, bytesRead);
                            }

                            // 使用toByteArray()方法从ByteArrayOutputStream对象获取二进制数据。
                            byte[] imageData = baos.toByteArray();
//                            System.out.println("二进制数据:"+imageData);

                            // 关闭FileInputStream和ByteArrayOutputStream对象。
                            fis.close();
                            baos.close();

                            String series = ForFather.Series; // 这里莫不默认都是可以的

                            String dola = "true";
                            mapper.addfile2(series, fileName, imageData, studentnumber, dola);
                            mapper.change();  // 将同一series的后面加入的都将其dola列改为false 因为你并设置默认值是true


                            mapper.setTrue();
                            mapper.gugu();

                            /* 提交事务并释放资源 */
                            sqlSession.commit();  // 提交
                            sqlSession.close();  // 释放

                            /* 用完即删 -- 图片 */
                            File imageFile = new File("./src/images/"+fileName);
                            // Delete the image.
                            imageFile.delete();


                            String contextPath = req.getContextPath();
                            resp.sendRedirect(contextPath + "/pages/bjxc.html"); // 前往这个页面
                        }
                    }
                } catch(Exception e){
                    e.printStackTrace();
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }
}
package com.halibaduo.Work;

import com.halibaduo.mapper.BrandMapper;
import com.halibaduo.mapper.UserMapper;
import com.halibaduo.util.SqlSessionFactoryUtils;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author wangjie
 * 用于bjxc的删除
 */
@WebServlet(urlPatterns = "/forAway")
public class ForAway extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String id = req.getParameter("id"); // 获取需要删除的图片的id了

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        mapper.away(id);

        // 以放变化之后true和false导致图片展示出现问题
        mapper.change();  // 将同一series的后面加入的都将其dola列改为false 因为你并设置默认值是true

        mapper.setTrue();

        mapper.gugu();

        /* 提交事务并释放资源 */
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

    }
}
package com.halibaduo.Work;

import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author wangjie
 * 用于bjyy的删除
 */
@WebServlet(urlPatterns = "/forAway1")
public class ForAway1 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String id = req.getParameter("id"); // 获取需要删除的图片的id了

        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        mapper.away1(id);

        // 以放变化之后true和false导致图片展示出现问题
        mapper.change1();  // 将同一series的后面加入的都将其dola列改为false 因为你并设置默认值是true

        mapper.setTrue1();

        mapper.gugu1();

        /* 提交事务并释放资源 */
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放
    }
}
package com.halibaduo.Work;

import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author wangjie
 * 用户系统通告的id发送服务器使用
 * TODO 功能优化 暂且将此程序屏蔽 forAway2 改为了 forAway2-false
 * TODO 反馈： 性能优化成功
 * TODO 此程序可以去除
 */
@WebServlet(urlPatterns = "/forAway2-false")
public class ForAway2 extends HttpServlet {
    public static String idid = "1";
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String id = req.getParameter("id"); // 获取需要删除的图片的id了

        idid = id; // 储存起来用得到 shownews 获取数据用得到

    }
}
package com.halibaduo.Work;

import com.halibaduo.web.Donate;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * @author wangjie
 * 用于告诉用户捐款成功的页面
 */
@WebServlet(urlPatterns = "/forDonate")
public class Fordonate extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setCharacterEncoding("UTF-8");
        if(Donate.donateValue == 1){
            resp.getWriter().write("感谢您的慷慨解囊，我们后续会将钱款用途以短信方式告知于您~");
        }else{
            resp.getWriter().write("1");
        }

    }
}
package com.halibaduo.Work;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

/**
 * @author wangjie
 * 服务与Father 为其在点击新增时提供系列名
 */
@WebServlet(urlPatterns = "/forFather")
public class ForFather extends HttpServlet {
    public static String Series = "默认名";
    public static ThreadLocal<String> threadLocalData = new ThreadLocal<>();

    public static String getThreadLocalData() {
        return threadLocalData.get();
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String series = req.getParameter("series");
        series = new String(series.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
        System.out.println("接受到的系列名:"+series);

        // 将用户选择的series给到服务器
        Series = series;
        // TODO 下面的是优化代码
        ForFather.setThreadLocalData(series);

    }

    public static void setThreadLocalData(String series) {
        threadLocalData.set(series);
    }
}
package com.halibaduo.Work;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

/**
 * @author wangjie
 * 服务于bjtz的点击查看详情时的获得对应的id
 */
@WebServlet(urlPatterns = "/forFor")
public class ForFor extends HttpServlet {
    public static String idla = "";
    public static ThreadLocal<String> threadLocalData = new ThreadLocal<>();
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String id = req.getParameter("id");
//        idla = new String(idla.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
//        System.out.println("接受到的系列名:"+idla);

        idla = id;
        ForFor.setThreadLocalData(idla);
        /*// TODO 就在此时直接储存在Foror中
        // TODO 直接在此处调用试一试能否提取到内容
        String threadLocalData1 = ForFor.getThreadLocalData();
        System.out.println("在此处提取到的内容是:"+threadLocalData1);*/
    }

    public static void setThreadLocalData(String data) {
        threadLocalData.set(data);
    }

    public static String getThreadLocalData() {
        return threadLocalData.get();
    }

    public static void removeThreadLocalData() {
        threadLocalData.remove();
    }
}
package com.halibaduo.Work;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

/**
 * @author wangjie
 * 服务与Mother 为其在点击新增时提供系列名
 */
@WebServlet(urlPatterns = "/forMother")
public class ForMather extends HttpServlet {
    public static String Series = "默认名";
    public static ThreadLocal<String> threadLocalData = new ThreadLocal<>();

    public static String getThreadLocalData() {
        return threadLocalData.get();
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String series = req.getParameter("series");
        series = new String(series.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);
//        System.out.println("接受到的系列名:"+series);

        // 将用户选择的series给到服务器
        Series = series;
        // TODO 优化
        ForMather.setThreadLocalData(series);

    }

    public static void setThreadLocalData(String series) {
        threadLocalData.set(series);
    }
}
package com.halibaduo.Work;

import com.alibaba.fastjson.JSONObject;
import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author wangjie
 * 服务于给细节查看bjtz时的获取数据
 */
@WebServlet(urlPatterns = "/getForLa")
public class GetForLa extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        String id = ForFor.idla; // 得到锁定的id值
        System.out.println("id:"+id);

        String content = mapper.getContent(id);
        String title = mapper.getTitle(id);

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("content", content);
        jsonObject.put("title", title);

        String jsonString = jsonObject.toString();

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);

    }
}
package com.halibaduo.Work;

import com.alibaba.fastjson.JSONObject;
import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author wangjie
 * 服务于给细节查看bjtz时的获取数据
 */
@WebServlet(urlPatterns = "/getForLa1")
public class GetForLa1 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        // TODO 暂且封锁这两行语句 进行功能优化
//        String id = ForAway2.idid; // 得到锁定的id值
//        System.out.println("id:"+id);

        String id = req.getParameter("id");
        System.out.println("获取的id="+id);


        String content = mapper.getContent1(id);
        String truecontent = mapper.gettruecontent(id);

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("content", content);
        jsonObject.put("truecontent", truecontent);

        String jsonString = jsonObject.toString();

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);

    }
}
package com.halibaduo.Work;

import com.alibaba.fastjson.JSONObject;
import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;

import static com.halibaduo.Work.ForFor.threadLocalData;

/**
 * @author wangjie
 * 服务于search的点击前往查看 数显显示和查看数据加1
 */
@WebServlet(urlPatterns = "/getForLa2")
public class GetForLa2 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        /*String id = ForFor.idla; // 得到锁定的id值*/
        /*System.out.println("id:"+id);*/
        // TODO 修改新增了 ThreadLocal 效果如何暂且不知道
//        String id = ForFor.getThreadLocalData();
//        System.out.println("知道了此处的id为:"+id);
        // TODO 进一步优化
        String id = req.getParameter("id");
//        System.out.println("这里获取的id="+id);

        String content = mapper.getContent11(id);
        String title = mapper.getTitle11(id);
        mapper.updatela(id);

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("content", content);
        jsonObject.put("title", title);

        String jsonString = jsonObject.toString();

        // TODO 如何不再使用ThreadLocal 那么请将此处的一行代码也删除
        ForFor.removeThreadLocalData();

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);

    }
}
package com.halibaduo.Work;

import com.alibaba.fastjson.JSONObject;
import com.halibaduo.mapper.UserMapper;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;

/**
 * @author wangjie
 * 服务于search的点击前往查看 数显显示和查看数据加1
 */
@WebServlet(urlPatterns = "/getForLa3")
public class GetForLa3 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        /*String id = ForFor.idla; // 得到锁定的id值*/
        /*System.out.println("id:"+id);*/
        // TODO 修改新增了 ThreadLocal 效果如何暂且不知道
//        String id = ForFor.getThreadLocalData();
//        System.out.println("知道了此处的id为:"+id);
        // TODO 进一步优化
        String id = req.getParameter("id");
//        System.out.println("这里获取的id="+id);

        String content = mapper.getContentla(id);
        String url = mapper.getUrl(id);
        String data = mapper.getdata(id);

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("content", content);
        jsonObject.put("url", url);
        jsonObject.put("data", data);

        String jsonString = jsonObject.toString();

        // TODO 如何不再使用ThreadLocal 那么请将此处的一行代码也删除
        ForFor.removeThreadLocalData();

        /*6.提交事务并释放资源*/
        sqlSession.commit();  // 提交
        sqlSession.close();  // 释放

        // 3.响应数据
        resp.setContentType("text/json;charset=utf-8");
        resp.getWriter().write(jsonString);

    }
}
package com.halibaduo.Work;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.util.List;

/**
 * @author wangjie
 * 服务于进入班集体 的 班级相册
 * 向数据库中加入图片文件数据
 */
@WebServlet(urlPatterns = "/mother")
public class Mother extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        // 创建新的文件夹用于储放图片  文件夹名称images 位置就是在项目目录的src下面
        System.out.println(System.getProperty("user.dir"));
        File imagesFolder = new File("./src/videos");

        // 尝试创建文件夹。
        if (!imagesFolder.exists()) {
            try {
                imagesFolder.mkdir();
                System.out.println("创建成功！");
            } catch (Exception e) {
                System.out.println("创建失败！");
            }
        }

        if (ServletFileUpload.isMultipartContent(req)) {
            //创建DiskFileItemFactory 工厂
            DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();
            //创建文件上传解析器
            ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory);
            servletFileUpload.setHeaderEncoding("UTF-8");
            try {
                try{
                    List<FileItem> list = servletFileUpload.parseRequest(req);
                    for (FileItem item : list) {
                        if (item.isFormField()) { //判断上传是否为文件
                            System.out.println(item.getFieldName());  // 输出html对应的那个id
                            System.out.println(item.getString("UTF-8")); // 输出文件的原名称
                            // 这里开始将文件储存到数据库中 当然 只需要储存这个文件的位置、名称即可
                            /*
                            * fileLocation :文件位置   fileName : 文件名称 id自增
                            * */
                            resp.setContentType("text/html;charset=utf-8");
                            PrintWriter writer = resp.getWriter();

                            writer.write("<h1>文件太大了，请换一张小一些的，谢谢~</h1>");
                            // 留意文件太大了是储存不到数据库，不是说video文件夹中进不去 所以当文件太大了的时候不要忘记还需要删除

                            String fileName = item.getName();
                            File imageFile = new File("./src/videos/"+fileName);
                            // Delete the image.
                            imageFile.delete();
                        } else {
                            HttpSession session = ((HttpServletRequest) req).getSession();
                            User user = (User) session.getAttribute("user");
                            String studentnumber = user.getStudentnumber(); // 得到该提交人的学号了

//                            System.out.println(item.getName());  // 输出文件的名称
                            //将文件写到本地磁盘  暂时并没有觉得有什么大不妥 但是我还是决定告诉一下用户图片位置
                            item.write(new File("./src/videos/" + item.getName()));  // 用户上传的图片文件会储存在……
                            req.setAttribute("message", "upload successful");


                            String fileName = item.getName();

                            // 创建一个FileInputStream对象，将其与要读取的图像文件关联。
                            FileInputStream fis = new FileInputStream("./src/videos/"+fileName);

                            // 创建一个ByteArrayOutputStream对象。
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();

                            // 使用read()方法从FileInputStream对象读取数据，并将其写入ByteArrayOutputStream对象。
                            byte[] buffer = new byte[1024];
                            int bytesRead;
                            while ((bytesRead = fis.read(buffer)) != -1) {
                                baos.write(buffer, 0, bytesRead);
                            }

                            // 使用toByteArray()方法从ByteArrayOutputStream对象获取二进制数据。
                            byte[] imageData = baos.toByteArray();
                            System.out.println("二进制数据:"+imageData);

                            // 关闭FileInputStream和ByteArrayOutputStream对象。
                            fis.close();
                            baos.close();

                            String dola = "true";
//                            String series = ForMather.Series;
                            // TODO 优化
                            String series = ForMather.getThreadLocalData();
                            mapper.addfile1(series, fileName, imageData, studentnumber, dola);

                            mapper.change1();
                            mapper.setTrue1();
                            mapper.gugu1();

                            /* 提交事务并释放资源 */
                            sqlSession.commit();  // 提交
                            sqlSession.close();  // 释放

                            /* 用完即删 -- 图片 */
                            File imageFile = new File("./src/videos/"+fileName);
                            // Delete the image.
                            imageFile.delete();


                            String contextPath = req.getContextPath();
                            resp.sendRedirect(contextPath + "/pages/bjyy.html"); // 前往这个页面
                        }
                    }
                } catch(Exception e){
                    e.printStackTrace();
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);
    }
}
package com.halibaduo.Work;

import com.halibaduo.mapper.UserMapper;
import com.halibaduo.pojo.User;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.util.List;

/**
 * @author wangjie
 * 服务于进入班集体 的 班级相册
 * 向数据库中加入图片文件数据
 */
@WebServlet(urlPatterns = "/mother1")
public class Mother1 extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        /* 1.加载mybatis的核心部件  去官网copy*/
        String resource = "mybatis-config.xml";  // 就在resources根目录下
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        /*2.获取SqlSession对象, 用它执行sql*/
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 设置自动提交事务

        /*3.获取mapper接口的代理对象*/
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        // 创建新的文件夹用于储放图片  文件夹名称images 位置就是在项目目录的src下面
        System.out.println(System.getProperty("user.dir"));
        File imagesFolder = new File("./src/videos");

        // 尝试创建文件夹。
        if (!imagesFolder.exists()) {
            try {
                imagesFolder.mkdir();
                System.out.println("创建成功！");
            } catch (Exception e) {
                System.out.println("创建失败！");
            }
        }

        if (ServletFileUpload.isMultipartContent(req)) {
            //创建DiskFileItemFactory 工厂
            DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();
            //创建文件上传解析器
            ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory);
            servletFileUpload.setHeaderEncoding("UTF-8");
            try {
                try{
                    List<FileItem> list = servletFileUpload.parseRequest(req);
                    for (FileItem item : list) {
                        if (item.isFormField()) { //判断上传是否为文件
                            System.out.println(item.getFieldName());  // 输出html对应的那个id
                            System.out.println(item.getString("UTF-8")); // 输出文件的原名称
                            // 这里开始将文件储存到数据库中 当然 只需要储存这个文件的位置、名称即可
                            /*
                            * fileLocation :文件位置   fileName : 文件名称 id自增
                            * */
                            resp.setContentType("text/html;charset=utf-8");
                            PrintWriter writer = resp.getWriter();

                            writer.write("<h1>文件太大了，请换一张小一些的，谢谢~</h1>");
                            // 其实当文件过大时也到不了这里 哈哈 有空记得的话再回来改

                            String fileName = item.getName();
                            File imageFile = new File("./src/videos/"+fileName);
                            // Delete the image.
                            imageFile.delete();
                        } else {
                            HttpSession session = ((HttpServletRequest) req).getSession();
                            User user = (User) session.getAttribute("user");
                            String studentnumber = user.getStudentnumber(); // 得到该提交人的学号了

                            System.out.println(item.getName());  // 输出文件的名称
                            //将文件写到本地磁盘  暂时并没有觉得有什么大不妥 但是我还是决定告诉一下用户图片位置
                            item.write(new File("./src/videos/" + item.getName()));  // 用户上传的图片文件会储存在……
                            req.setAttribute("message", "upload successful");


                            String fileName = item.getName();

                            // 创建一个FileInputStream对象，将其与要读取的图像文件关联。
                            FileInputStream fis = new FileInputStream("./src/videos/"+fileName);

                            // 创建一个ByteArrayOutputStream对象。
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();

                            // 使用read()方法从FileInputStream对象读取数据，并将其写入ByteArrayOutputStream对象。
                            byte[] buffer = new byte[1024];
                            int bytesRead;
                            while ((bytesRead = fis.read(buffer)) != -1) {
                                baos.write(buffer, 0, bytesRead);
                            }

                            // 使用toByteArray()方法从ByteArrayOutputStream对象获取二进制数据。
                            byte[] imageData = baos.toByteArray();
                            System.out.println("二进制数据:"+imageData);

                            // 关闭FileInputStream和ByteArrayOutputStream对象。
                            fis.close();
                            baos.close();

                            String series = ForMather.Series;
                            String dola = "true";
                            mapper.addfile1(series, fileName, imageData, studentnumber, dola);

                            mapper.change1();
                            mapper.setTrue1();
                            mapper.gugu1();

                            /* 提交事务并释放资源 */
                            sqlSession.commit();  // 提交
                            sqlSession.close();  // 释放

                            /* 用完即删 -- 图片 */
                            File imageFile = new File("./src/videos/"+fileName);
                            // Delete the image.
                            imageFile.delete();


                            String contextPath = req.getContextPath();
                            resp.sendRedirect(contextPath + "/pages/bjyy.html"); // 前往这个页面
                        }
                    }
                } catch(Exception e){
                    e.printStackTrace();
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);

    }
}
